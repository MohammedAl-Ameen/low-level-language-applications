D G "__PCM__" 0 0 ""5.049""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""30-Oct-20""
D G "__TIME__" 0 0 ""21:42:16""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?"" "Standard Header file for the PIC16F877A device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 37 ""
v L "value" 1 37 "int8" `54 
f B "set_tris_a" 1 37 "void(int8 value)" `53 
f N "set_tris_b" 1 38 ""
v L "value" 1 38 "int8" `56 
f B "set_tris_b" 1 38 "void(int8 value)" `55 
f N "set_tris_c" 1 39 ""
v L "value" 1 39 "int8" `58 
f B "set_tris_c" 1 39 "void(int8 value)" `57 
f N "set_tris_d" 1 40 ""
v L "value" 1 40 "int8" `60 
f B "set_tris_d" 1 40 "void(int8 value)" `59 
f N "set_tris_e" 1 41 ""
v L "value" 1 41 "int8" `62 
f B "set_tris_e" 1 41 "void(int8 value)" `61 
f N "get_tris_a" 1 42 ""
f B "get_tris_a" 1 42 "int8()" `63 
f N "get_tris_b" 1 43 ""
f B "get_tris_b" 1 43 "int8()" `64 
f N "get_tris_c" 1 44 ""
f B "get_tris_c" 1 44 "int8()" `65 
f N "get_tris_d" 1 45 ""
f B "get_tris_d" 1 45 "int8()" `66 
f N "get_tris_e" 1 46 ""
f B "get_tris_e" 1 46 "int8()" `67 
f N "output_a" 1 47 ""
v L "value" 1 47 "int8" `69 
f B "output_a" 1 47 "void(int8 value)" `68 
f N "output_b" 1 48 ""
v L "value" 1 48 "int8" `71 
f B "output_b" 1 48 "void(int8 value)" `70 
f N "output_c" 1 49 ""
v L "value" 1 49 "int8" `73 
f B "output_c" 1 49 "void(int8 value)" `72 
f N "output_d" 1 50 ""
v L "value" 1 50 "int8" `75 
f B "output_d" 1 50 "void(int8 value)" `74 
f N "output_e" 1 51 ""
v L "value" 1 51 "int8" `77 
f B "output_e" 1 51 "void(int8 value)" `76 
f N "input_a" 1 52 ""
f B "input_a" 1 52 "int8()" `78 
f N "input_b" 1 53 ""
f B "input_b" 1 53 "int8()" `79 
f N "input_c" 1 54 ""
f B "input_c" 1 54 "int8()" `80 
f N "input_d" 1 55 ""
f B "input_d" 1 55 "int8()" `81 
f N "input_e" 1 56 ""
f B "input_e" 1 56 "int8()" `82 
f N "input_change_a" 1 57 ""
f B "input_change_a" 1 57 "int8()" `83 
f N "input_change_b" 1 58 ""
f B "input_change_b" 1 58 "int8()" `84 
f N "input_change_c" 1 59 ""
f B "input_change_c" 1 59 "int8()" `85 
f N "input_change_d" 1 60 ""
f B "input_change_d" 1 60 "int8()" `86 
f N "input_change_e" 1 61 ""
f B "input_change_e" 1 61 "int8()" `87 
f N "port_b_pullups" 1 62 ""
v L "value" 1 62 "int8" `89 
f B "port_b_pullups" 1 62 "void(int8 value)" `88 
f N "input" 1 63 ""
v L "pin" 1 63 "int16" `91 
f B "input" 1 63 "int8(int16 pin)" `90 
f N "input_state" 1 64 ""
v L "pin" 1 64 "int16" `93 
f B "input_state" 1 64 "int8(int16 pin)" `92 
f N "output_low" 1 65 ""
v L "pin" 1 65 "int16" `95 
f B "output_low" 1 65 "void(int16 pin)" `94 
f N "output_high" 1 66 ""
v L "pin" 1 66 "int16" `97 
f B "output_high" 1 66 "void(int16 pin)" `96 
f N "output_toggle" 1 67 ""
v L "pin" 1 67 "int16" `99 
f B "output_toggle" 1 67 "void(int16 pin)" `98 
f N "output_bit" 1 68 ""
v L "pin" 1 68 "int16" `101 
v L "level" 1 68 "int8" `102 
f B "output_bit" 1 68 "void(int16 pin,int8 level)" `100 
f N "output_float" 1 69 ""
v L "pin" 1 69 "int16" `104 
f B "output_float" 1 69 "void(int16 pin)" `103 
f N "output_drive" 1 70 ""
v L "pin" 1 70 "int16" `106 
f B "output_drive" 1 70 "void(int16 pin)" `105  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 74 "40"
d G "PIN_A1" 1 75 "41"
d G "PIN_A2" 1 76 "42"
d G "PIN_A3" 1 77 "43"
d G "PIN_A4" 1 78 "44"
d G "PIN_A5" 1 79 "45"
d G "PIN_B0" 1 81 "48"
d G "PIN_B1" 1 82 "49"
d G "PIN_B2" 1 83 "50"
d G "PIN_B3" 1 84 "51"
d G "PIN_B4" 1 85 "52"
d G "PIN_B5" 1 86 "53"
d G "PIN_B6" 1 87 "54"
d G "PIN_B7" 1 88 "55"
d G "PIN_C0" 1 90 "56"
d G "PIN_C1" 1 91 "57"
d G "PIN_C2" 1 92 "58"
d G "PIN_C3" 1 93 "59"
d G "PIN_C4" 1 94 "60"
d G "PIN_C5" 1 95 "61"
d G "PIN_C6" 1 96 "62"
d G "PIN_C7" 1 97 "63"
d G "PIN_D0" 1 99 "64"
d G "PIN_D1" 1 100 "65"
d G "PIN_D2" 1 101 "66"
d G "PIN_D3" 1 102 "67"
d G "PIN_D4" 1 103 "68"
d G "PIN_D5" 1 104 "69"
d G "PIN_D6" 1 105 "70"
d G "PIN_D7" 1 106 "71"
d G "PIN_E0" 1 108 "72"
d G "PIN_E1" 1 109 "73"
d G "PIN_E2" 1 110 "74"
d G "FALSE" 1 113 "0"
d G "TRUE" 1 114 "1"
d G "BYTE" 1 116 "int8"
d G "BOOLEAN" 1 117 "int1"
d G "getc" 1 119 "getch"
d G "fgetc" 1 120 "getch"
d G "getchar" 1 121 "getch"
d G "putc" 1 122 "putchar"
d G "fputc" 1 123 "putchar"
d G "fgets" 1 124 "gets"
d G "fputs" 1 125 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 130 ""
f B "restart_cause" 1 130 "int8()" `107 
f N "reset_cpu" 1 131 ""
f B "reset_cpu" 1 131 "void()" `108 
f N "sleep" 1 132 ""
f B "sleep" 1 132 "void()" `109  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 134 "3"
d G "WDT_TIMEOUT" 1 135 "11"
d G "MCLR_FROM_SLEEP" 1 136 "19"
d G "MCLR_FROM_RUN" 1 137 "27"
d G "NORMAL_POWER_UP" 1 138 "25"
d G "BROWNOUT_RESTART" 1 139 "26"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 146 ""
v L "mode" 1 146 "int8" `111 
f B "setup_timer_0" 1 146 "void(int8 mode)" `110 
f N "set_timer0" 1 147 ""
v L "value" 1 147 "int8" `113 
f B "set_timer0" 1 147 "void(int8 value)" `112 
f N "get_timer0" 1 148 ""
f B "get_timer0" 1 148 "int8()" `114 
f N "setup_counters" 1 149 ""
v L "mode" 1 149 "int8" `116 
v L "prescaler" 1 149 "int8" `117 
f B "setup_counters" 1 149 "void(int8 mode,int8 prescaler)" `115 
f N "set_rtcc" 1 150 ""
v L "value" 1 150 "int8" `119 
f B "set_rtcc" 1 150 "void(int8 value)" `118 
f N "get_rtcc" 1 151 ""
f B "get_rtcc" 1 151 "int8()" `120  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 153 "0"
d G "T0_EXT_L_TO_H" 1 154 "32"
d G "T0_EXT_H_TO_L" 1 155 "48"
d G "T0_DIV_1" 1 157 "8"
d G "T0_DIV_2" 1 158 "0"
d G "T0_DIV_4" 1 159 "1"
d G "T0_DIV_8" 1 160 "2"
d G "T0_DIV_16" 1 161 "3"
d G "T0_DIV_32" 1 162 "4"
d G "T0_DIV_64" 1 163 "5"
d G "T0_DIV_128" 1 164 "6"
d G "T0_DIV_256" 1 165 "7"
d G "T0_8_BIT" 1 168 "0"
d G "RTCC_INTERNAL" 1 172 "0"
d G "RTCC_EXT_L_TO_H" 1 173 "32"
d G "RTCC_EXT_H_TO_L" 1 174 "48"
d G "RTCC_DIV_1" 1 175 "8"
d G "RTCC_DIV_2" 1 176 "0"
d G "RTCC_DIV_4" 1 177 "1"
d G "RTCC_DIV_8" 1 178 "2"
d G "RTCC_DIV_16" 1 179 "3"
d G "RTCC_DIV_32" 1 180 "4"
d G "RTCC_DIV_64" 1 181 "5"
d G "RTCC_DIV_128" 1 182 "6"
d G "RTCC_DIV_256" 1 183 "7"
d G "RTCC_8_BIT" 1 184 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
f N "setup_wdt" 1 195 ""
v L "mode" 1 195 "int16" `122 
f B "setup_wdt" 1 195 "void(int16 mode)" `121 
f N "restart_wdt" 1 196 ""
f B "restart_wdt" 1 196 "void()" `123  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 199 "8"
d G "WDT_36MS" 1 200 "9"
d G "WDT_72MS" 1 201 "10"
d G "WDT_144MS" 1 202 "11"
d G "WDT_288MS" 1 203 "12"
d G "WDT_576MS" 1 204 "13"
d G "WDT_1152MS" 1 205 "14"
d G "WDT_2304MS" 1 206 "15"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 212 ""
v L "mode" 1 212 "int16" `125 
f B "setup_timer_1" 1 212 "void(int16 mode)" `124 
f N "get_timer1" 1 213 ""
f B "get_timer1" 1 213 "int16()" `126 
f N "set_timer1" 1 214 ""
v L "value" 1 214 "int16" `128 
f B "set_timer1" 1 214 "void(int16 value)" `127  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 217 "0"
d G "T1_INTERNAL" 1 218 "0x85"
d G "T1_EXTERNAL" 1 219 "0x87"
d G "T1_EXTERNAL_SYNC" 1 220 "0x83"
d G "T1_CLK_OUT" 1 222 "8"
d G "T1_DIV_BY_1" 1 224 "0"
d G "T1_DIV_BY_2" 1 225 "0x10"
d G "T1_DIV_BY_4" 1 226 "0x20"
d G "T1_DIV_BY_8" 1 227 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 232 ""
v L "mode" 1 232 "int8" `130 
v L "period" 1 232 "int8" `131 
v L "postscale" 1 232 "int8" `132 
f B "setup_timer_2" 1 232 "void(int8 mode,int8 period,int8 postscale)" `129 
f N "get_timer2" 1 233 ""
f B "get_timer2" 1 233 "int8()" `133 
f N "set_timer2" 1 234 ""
v L "value" 1 234 "int8" `135 
f B "set_timer2" 1 234 "void(int8 value)" `134  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 236 "0"
d G "T2_DIV_BY_1" 1 237 "4"
d G "T2_DIV_BY_4" 1 238 "5"
d G "T2_DIV_BY_16" 1 239 "6"
c L "set_timer2" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 245 ""
v L "mode" 1 245 "int32" `137 
f B "setup_ccp1" 1 245 "void(int32 mode)" `136 
f N "setup_ccp1" 1 246 ""
v L "mode" 1 246 "int32" `139 
v L "pwm" 1 246 "int8" `140 
f B "setup_ccp1" 1 246 "void(int32 mode,int8 pwm)" `138 
f N "set_pwm1_duty" 1 247 ""
v L "value" 1 247 "int16" `142 
f B "set_pwm1_duty" 1 247 "void(int16 value)" `141  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 249 "0"
d G "CCP_CAPTURE_FE" 1 250 "0x04"
d G "CCP_CAPTURE_RE" 1 251 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 252 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 253 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 254 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 255 "0x09"
d G "CCP_COMPARE_INT" 1 256 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 257 "0x0B"
d G "CCP_PWM" 1 258 "0x0C"
d G "CCP_PWM_PLUS_1" 1 259 "0x1c"
d G "CCP_PWM_PLUS_2" 1 260 "0x2c"
d G "CCP_PWM_PLUS_3" 1 261 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 268 ""
v L "mode" 1 268 "int32" `147 
f B "setup_ccp2" 1 268 "void(int32 mode)" `146 
f N "setup_ccp2" 1 269 ""
v L "mode" 1 269 "int32" `149 
v L "pwm" 1 269 "int8" `150 
f B "setup_ccp2" 1 269 "void(int32 mode,int8 pwm)" `148 
f N "set_pwm2_duty" 1 270 ""
v L "value" 1 270 "int16" `152 
f B "set_pwm2_duty" 1 270 "void(int16 value)" `151 
c L "set_pwm2_duty" 1 3 5 "FUNCTION"
f N "setup_psp" 1 279 ""
v L "mode" 1 279 "int8" `157 
f B "setup_psp" 1 279 "void(int8 mode)" `156 
f N "psp_output_full" 1 280 ""
f B "psp_output_full" 1 280 "int8()" `158 
f N "psp_input_full" 1 281 ""
f B "psp_input_full" 1 281 "int8()" `159 
f N "psp_overflow" 1 282 ""
f B "psp_overflow" 1 282 "int8()" `160  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 284 "0x10"
d G "PSP_DISABLED" 1 285 "0"
c L "psp_overflow" 1 3 3 "FUNCTION"
f N "setup_spi" 1 292 ""
v L "mode" 1 292 "int32" `163 
f B "setup_spi" 1 292 "void(int32 mode)" `162 
f N "spi_write" 1 293 ""
v L "value" 1 293 "int8" `165 
f B "spi_write" 1 293 "void(int8 value)" `164 
f N "spi_read" 1 294 ""
f B "spi_read" 1 294 "int8()" `166 
f N "spi_read" 1 295 ""
v L "value" 1 295 "int8" `168 
f B "spi_read" 1 295 "int8(int8 value)" `167 
f N "spi_data_in" 1 296 ""
f B "spi_data_in" 1 296 "int8()" `169  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 298 "0x00"
d G "SPI_MASTER" 1 299 "0x20"
d G "SPI_SLAVE" 1 300 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 301 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 302 "0x00"
d G "SPI_CLK_DIV_4" 1 303 "0x00"
d G "SPI_CLK_DIV_16" 1 304 "0x01"
d G "SPI_CLK_DIV_64" 1 305 "0x02"
d G "SPI_CLK_T2" 1 306 "0x03"
d G "SPI_SS_DISABLED" 1 307 "0x01"
d G "SPI_XMIT_L_TO_H" 1 309 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 310 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 312 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 313 "0x8000"
d G "SPI_L_TO_H" 1 316 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 317 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 3 2 "FUNCTION"
f N "setup_uart" 1 321 ""
v L "baud" 1 321 "int32" `171 
f B "setup_uart" 1 321 "void(int32 baud)" `170 
f N "setup_uart" 1 322 ""
v L "baud" 1 322 "int32" `173 
v L "stream" 1 322 "int8" `174 
f B "setup_uart" 1 322 "void(int32 baud,int8 stream)" `172 
f N "setup_uart" 1 323 ""
v L "baud" 1 323 "int32" `176 
v L "stream" 1 323 "int8" `177 
v L "clock" 1 323 "int32" `178 
f B "setup_uart" 1 323 "void(int32 baud,int8 stream,int32 clock)" `175 
f N "set_uart_speed" 1 324 ""
v L "baud" 1 324 "int32" `180 
f B "set_uart_speed" 1 324 "void(int32 baud)" `179 
f N "set_uart_speed" 1 325 ""
v L "baud" 1 325 "int32" `182 
v L "stream" 1 325 "int8" `183 
f B "set_uart_speed" 1 325 "void(int32 baud,int8 stream)" `181 
f N "set_uart_speed" 1 326 ""
v L "baud" 1 326 "int32" `185 
v L "stream" 1 326 "int8" `186 
v L "clock" 1 326 "int32" `187 
f B "set_uart_speed" 1 326 "void(int32 baud,int8 stream,int32 clock)" `184  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 330 "2"
d G "UART_DATA" 1 331 "4"
c L "set_uart_speed" 1 3 3 "FUNCTION"
f N "setup_comparator" 1 335 ""
v L "mode" 1 335 "int32" `189 
f B "setup_comparator" 1 335 "void(int32 mode)" `188  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 337 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 338 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 339 "0xbcf05"
d G "NC_NC_NC_NC" 1 340 "0x0ff07"
d G "A0_A3_A1_A2" 1 341 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 342 "0x9ef01"
d G "A0_VR_A1_VR" 1 343 "0x3ff06"
d G "A3_VR_A2_VR" 1 344 "0xcff0e"
d G "CP1_INVERT" 1 345 "0x0000010"
d G "CP2_INVERT" 1 346 "0x0000020"
c L "setup_comparator" 1 3 2 "FUNCTION"
f N "setup_vref" 1 353 ""
v L "mode" 1 353 "int8" `193 
f B "setup_vref" 1 353 "void(int8 mode)" `192  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 355 "0xa0"
d G "VREF_HIGH" 1 356 "0x80"
d G "VREF_A2" 1 358 "0x40"
c L "setup_vref" 1 3 4 "FUNCTION"
f N "setup_adc" 1 366 ""
v L "mode" 1 366 "int32" `195 
f B "setup_adc" 1 366 "void(int32 mode)" `194 
f N "read_adc" 1 367 ""
f B "read_adc" 1 367 "int8()" `196 
f N "read_adc" 1 368 ""
v L "mode" 1 368 "int8" `198 
f B "read_adc" 1 368 "int8(int8 mode)" `197 
f N "read_adc" 1 369 ""
f G "read_adc" 1 369 "int16()" `199 
f N "read_adc" 1 370 ""
v L "mode" 1 370 "int8" `200 
f G "read_adc" 1 370 "int16(int8 mode)" `199 
f N "adc_done" 1 371 ""
f B "adc_done" 1 371 "int8(int8 mode)" `199  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 373 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 374 "0x10000"
d G "ADC_CLOCK_DIV_4" 1 375 "0x4000"
d G "ADC_CLOCK_DIV_8" 1 376 "0x0040"
d G "ADC_CLOCK_DIV_16" 1 377 "0x4040"
d G "ADC_CLOCK_DIV_32" 1 378 "0x0080"
d G "ADC_CLOCK_DIV_64" 1 379 "0x4080"
d G "ADC_CLOCK_INTERNAL" 1 380 "0x00c0" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 383 ""
v L "setting" 1 383 "int8" `201 
f B "setup_adc_ports" 1 383 "void(int8 setting)" `200 
f N "set_analog_pins" 1 384 ""
v L "setting" 1 384 "int8" `203 
f B "set_analog_pins" 1 384 "void(int8 setting)" `202 
f N "set_adc_channel" 1 385 ""
v L "channel" 1 385 "int8" `205 
f B "set_adc_channel" 1 385 "void(int8 channel)" `204  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 1 387 "7" "None"
d G "ALL_ANALOG" 1 388 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 1 389 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 1 390 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 391 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 392 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 393 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 1 394 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 1 395 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 1 396 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 1 397 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 1 398 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 399 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 400 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 401 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 402 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 1 403 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 1 404 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 405 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 406 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 407 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 1 408 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 1 409 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 1 410 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 1 411 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 412 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 413 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 414 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 417 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 418 "1"
d G "ADC_READ_ONLY" 1 419 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 425 ""
v L "x" 1 425 "sint8" `207 
f B "abs" 1 425 "sint8(sint8 x)" `206 
f N "abs" 1 426 ""
v L "x" 1 426 "sint16" `209 
f B "abs" 1 426 "sint16(sint16 x)" `208 
f N "abs" 1 427 ""
v L "x" 1 427 "sint32" `211 
f B "abs" 1 427 "sint32(sint32 x)" `210 
f N "abs" 1 428 ""
v L "x" 1 428 "float" `213 
f B "abs" 1 428 "float(float x)" `212 
f N "_mul" 1 429 ""
v L "??65535" 1 429 "int8" `215 
v L "??65535" 1 429 "int8" `216 
f B "_mul" 1 429 "int16(int8 ,int8 )" `214 
f N "_mul" 1 430 ""
v L "??65535" 1 430 "sint8" `218 
v L "??65535" 1 430 "sint8" `219 
f B "_mul" 1 430 "sint16(sint8 ,sint8 )" `217 
f N "_mul" 1 431 ""
v L "??65535" 1 431 "int16" `221 
v L "??65535" 1 431 "int16" `222 
f B "_mul" 1 431 "int32(int16 ,int16 )" `220 
f N "_mul" 1 432 ""
v L "??65535" 1 432 "sint16" `224 
v L "??65535" 1 432 "sint16" `225 
f B "_mul" 1 432 "sint32(sint16 ,sint16 )" `223  "Memory Manipulation Prototypes:"
f N "read_bank" 1 435 ""
v L "bank" 1 435 "int8" `227 
v L "offset" 1 435 "int8" `228 
f B "read_bank" 1 435 "int8(int8 bank,int8 offset)" `226 
f N "write_bank" 1 436 ""
v L "bank" 1 436 "int8" `230 
v L "offset" 1 436 "int8" `231 
v L "value" 1 436 "int8" `232 
f B "write_bank" 1 436 "void(int8 bank,int8 offset,int8 value)" `229 
f N "strcpy" 1 437 ""
v L "dest" 1 437 "*int8" `234 
v L "src" 1 437 "*int8" `235 
f B "strcpy" 1 437 "void(*int8 dest,*int8 src)" `233 
f N "memset" 1 438 ""
v L "destination" 1 438 "*int8" `237 
v L "value" 1 438 "int8" `238 
v L "num" 1 438 "int16" `239 
f B "memset" 1 438 "void(*int8 destination,int8 value,int16 num)" `236 
f N "memcpy" 1 439 ""
v L "destination" 1 439 "*int8" `241 
v L "source" 1 439 "*int8" `242 
v L "num" 1 439 "int16" `243 
f B "memcpy" 1 439 "void(*int8 destination,*int8 source,int16 num)" `240  "String Prototypes:"
f N "toupper" 1 442 ""
v L "cvalue" 1 442 "int8" `245 
f B "toupper" 1 442 "int8(int8 cvalue)" `244 
f N "tolower" 1 443 ""
v L "cvalue" 1 443 "int8" `247 
f B "tolower" 1 443 "int8(int8 cvalue)" `246 
f N "sprintf" 1 444 ""
v L "string" 1 444 "*int8" `249 
v L "cstring" 1 444 "*int8" `250 
f B "sprintf" 1 444 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `248  "Data Manipulators Prototypes:"
f N "shift_left" 1 447 ""
v L "address" 1 447 "*int8" `253 
v L "bytes" 1 447 "int8" `254 
v L "value" 1 447 "int8" `255 
f B "shift_left" 1 447 "int8(*int8 address,int8 bytes,int8 value)" `252 
f N "shift_right" 1 448 ""
v L "address" 1 448 "*int8" `257 
v L "bytes" 1 448 "int8" `258 
v L "value" 1 448 "int8" `259 
f B "shift_right" 1 448 "int8(*int8 address,int8 bytes,int8 value)" `256 
f N "rotate_left" 1 449 ""
v L "address" 1 449 "*int8" `261 
v L "bytes" 1 449 "int8" `262 
f B "rotate_left" 1 449 "void(*int8 address,int8 bytes)" `260 
f N "rotate_right" 1 450 ""
v L "address" 1 450 "*int8" `264 
v L "bytes" 1 450 "int8" `265 
f B "rotate_right" 1 450 "void(*int8 address,int8 bytes)" `263 
f N "swap" 1 451 ""
v L "value" 1 451 "int8" `267 
f B "swap" 1 451 "void(int8 value)" `266 
f N "make8" 1 452 ""
v L "var" 1 452 "int16" `269 
v L "offset" 1 452 "int8" `270 
f B "make8" 1 452 "int8(int16 var,int8 offset)" `268 
f N "make8" 1 453 ""
v L "var" 1 453 "int32" `272 
v L "offset" 1 453 "int8" `273 
f B "make8" 1 453 "int8(int32 var,int8 offset)" `271 
f N "make16" 1 454 ""
v L "varhigh" 1 454 "int8" `275 
v L "varlow" 1 454 "int8" `276 
f B "make16" 1 454 "int16(int8 varhigh,int8 varlow)" `274 
f N "make32" 1 455 ""
v L "var1" 1 455 "int16" `278 
f B "make32" 1 455 "int32(int16 var1)" `277 
f N "make32" 1 456 ""
v L "var1" 1 456 "int16" `280 
v L "var2" 1 456 "int16" `281 
f B "make32" 1 456 "int32(int16 var1,int16 var2)" `279 
f N "make32" 1 457 ""
v L "var1" 1 457 "int16" `283 
v L "var2" 1 457 "int8" `284 
f B "make32" 1 457 "int32(int16 var1,int8 var2)" `282 
f N "make32" 1 458 ""
v L "var1" 1 458 "int16" `286 
v L "var2" 1 458 "int8" `287 
v L "var3" 1 458 "int8" `288 
f B "make32" 1 458 "int32(int16 var1,int8 var2,int8 var3)" `285 
f N "make32" 1 459 ""
v L "var1" 1 459 "int8" `290 
f B "make32" 1 459 "int32(int8 var1)" `289 
f N "make32" 1 460 ""
v L "var1" 1 460 "int8" `292 
v L "var2" 1 460 "int8" `293 
f B "make32" 1 460 "int32(int8 var1,int8 var2)" `291 
f N "make32" 1 461 ""
v L "var1" 1 461 "int8" `295 
v L "var2" 1 461 "int8" `296 
v L "var3" 1 461 "int8" `297 
f B "make32" 1 461 "int32(int8 var1,int8 var2,int8 var3)" `294 
f N "make32" 1 462 ""
v L "var1" 1 462 "int8" `299 
v L "var2" 1 462 "int8" `300 
v L "var3" 1 462 "int8" `301 
v L "var4" 1 462 "int8" `302 
f B "make32" 1 462 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `298 
f N "make32" 1 463 ""
v L "var1" 1 463 "int8" `304 
v L "var2" 1 463 "int16" `305 
f B "make32" 1 463 "int32(int8 var1,int16 var2)" `303 
f N "make32" 1 464 ""
v L "var1" 1 464 "int8" `307 
v L "var2" 1 464 "int16" `308 
v L "var3" 1 464 "int8" `309 
f B "make32" 1 464 "int32(int8 var1,int16 var2,int8 var3)" `306 
f N "make32" 1 465 ""
v L "var1" 1 465 "int8" `311 
v L "var2" 1 465 "int8" `312 
v L "var3" 1 465 "int16" `313 
f B "make32" 1 465 "int32(int8 var1,int8 var2,int16 var3)" `310 
f N "bit_set" 1 466 ""
v L "var" 1 466 "int8" `315 
v L "bit" 1 466 "int8" `316 
f B "bit_set" 1 466 "void(int8 var,int8 bit)" `314 
f N "bit_set" 1 467 ""
v L "var" 1 467 "int16" `318 
v L "bit" 1 467 "int8" `319 
f B "bit_set" 1 467 "void(int16 var,int8 bit)" `317 
f N "bit_set" 1 468 ""
v L "var" 1 468 "int32" `321 
v L "bit" 1 468 "int8" `322 
f B "bit_set" 1 468 "void(int32 var,int8 bit)" `320 
f N "bit_clear" 1 469 ""
v L "var" 1 469 "int8" `324 
v L "bit" 1 469 "int8" `325 
f B "bit_clear" 1 469 "void(int8 var,int8 bit)" `323 
f N "bit_clear" 1 470 ""
v L "var" 1 470 "int16" `327 
v L "bit" 1 470 "int8" `328 
f B "bit_clear" 1 470 "void(int16 var,int8 bit)" `326 
f N "bit_clear" 1 471 ""
v L "var" 1 471 "int32" `330 
v L "bit" 1 471 "int8" `331 
f B "bit_clear" 1 471 "void(int32 var,int8 bit)" `329 
f N "bit_test" 1 472 ""
v L "var" 1 472 "int8" `333 
v L "bit" 1 472 "int8" `334 
f B "bit_test" 1 472 "int8(int8 var,int8 bit)" `332 
f N "bit_test" 1 473 ""
v L "var" 1 473 "int16" `336 
v L "bit" 1 473 "int8" `337 
f B "bit_test" 1 473 "int8(int16 var,int8 bit)" `335 
f N "bit_test" 1 474 ""
v L "var" 1 474 "int32" `339 
v L "bit" 1 474 "int8" `340 
f B "bit_test" 1 474 "int8(int32 var,int8 bit)" `338  "#use delay() Prototypes:"
f N "delay_cycles" 1 477 ""
v L "count" 1 477 "int8" `342 
f B "delay_cycles" 1 477 "void(int8 count)" `341 
f N "delay_ms" 1 478 ""
v L "time" 1 478 "int16" `344 
f B "delay_ms" 1 478 "void(int16 time)" `343 
f N "delay_us" 1 479 ""
v L "time" 1 479 "int16" `346 
f B "delay_us" 1 479 "void(int16 time)" `345  "#use rs232() Prototypes:"
f N "putchar" 1 482 ""
v L "cdata" 1 482 "int8" `348 
f B "putchar" 1 482 "void(int8 cdata)" `347 
f N "putchar" 1 483 ""
v L "cdata" 1 483 "int8" `350 
v L "stream" 1 483 "int8" `351 
f B "putchar" 1 483 "void(int8 cdata,int8 stream)" `349 
f N "puts" 1 484 ""
v L "string" 1 484 "*int8" `353 
f B "puts" 1 484 "void(*int8 string)" `352 
f N "puts" 1 485 ""
v L "string" 1 485 "*int8" `355 
v L "stream" 1 485 "int8" `356 
f B "puts" 1 485 "void(*int8 string,int8 stream)" `354 
f N "getch" 1 486 ""
f B "getch" 1 486 "int8()" `357 
f N "getch" 1 487 ""
v L "stream" 1 487 "int8" `359 
f B "getch" 1 487 "int8(int8 stream)" `358 
f N "gets" 1 488 ""
v L "string" 1 488 "*int8" `361 
f B "gets" 1 488 "void(*int8 string)" `360 
f N "gets" 1 489 ""
v L "string" 1 489 "*int8" `363 
v L "stream" 1 489 "int8" `364 
f B "gets" 1 489 "void(*int8 string,int8 stream)" `362 
f N "kbhit" 1 490 ""
f B "kbhit" 1 490 "int8()" `365 
f N "kbhit" 1 491 ""
v L "stream" 1 491 "int8" `367 
f B "kbhit" 1 491 "int8(int8 stream)" `366 
f N "printf" 1 492 ""
v L "string" 1 492 "*int8" `369 
f B "printf" 1 492 "void(*int8 string,*int8 _VA_LIST)" `368 
f N "fprintf" 1 493 ""
v L "stream" 1 493 "int8" `372 
v L "string" 1 493 "*int8" `373 
f B "fprintf" 1 493 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `371 
f N "putc_send" 1 494 ""
f B "putc_send" 1 494 "void()" `375 
f N "fputc_send" 1 495 ""
v L "stream" 1 495 "int8" `377 
f B "fputc_send" 1 495 "void(int8 stream)" `376 
f N "rcv_buffer_full" 1 496 ""
f B "rcv_buffer_full" 1 496 "int8()" `378 
f N "rcv_buffer_full" 1 497 ""
v L "stream" 1 497 "int8" `380 
f B "rcv_buffer_full" 1 497 "int8(int8 stream)" `379 
f N "rcv_buffer_bytes" 1 498 ""
f B "rcv_buffer_bytes" 1 498 "int16()" `381 
f N "rcv_buffer_bytes" 1 499 ""
v L "stream" 1 499 "int8" `383 
f B "rcv_buffer_bytes" 1 499 "int16(int8 stream)" `382 
f N "tx_buffer_full" 1 500 ""
f B "tx_buffer_full" 1 500 "int8()" `384 
f N "tx_buffer_full" 1 501 ""
v L "stream" 1 501 "int8" `386 
f B "tx_buffer_full" 1 501 "int8(int8 stream)" `385 
f N "tx_buffer_bytes" 1 502 ""
f B "tx_buffer_bytes" 1 502 "int16()" `387 
f N "tx_buffer_bytes" 1 503 ""
v L "stream" 1 503 "int8" `389 
f B "tx_buffer_bytes" 1 503 "int16(int8 stream)" `388  "#use i2c() Prototypes:"
f N "i2c_read" 1 506 ""
f B "i2c_read" 1 506 "int8()" `390 
f N "i2c_read" 1 507 ""
v L "stream" 1 507 "int8" `392 
f B "i2c_read" 1 507 "int8(int8 stream)" `391 
f N "i2c_read" 1 508 ""
v L "stream" 1 508 "int8" `394 
v L "ack" 1 508 "int8" `395 
f B "i2c_read" 1 508 "int8(int8 stream,int8 ack)" `393 
f N "i2c_write" 1 509 ""
v L "data" 1 509 "int8" `397 
f B "i2c_write" 1 509 "int8(int8 data)" `396 
f N "i2c_write" 1 510 ""
v L "stream" 1 510 "int8" `399 
v L "data" 1 510 "int8" `400 
f B "i2c_write" 1 510 "int8(int8 stream,int8 data)" `398 
f N "i2c_start" 1 511 ""
f B "i2c_start" 1 511 "void()" `401 
f N "i2c_start" 1 512 ""
v L "stream" 1 512 "int8" `403 
f B "i2c_start" 1 512 "void(int8 stream)" `402 
f N "i2c_start" 1 513 ""
v L "stream" 1 513 "int8" `405 
v L "restart" 1 513 "int8" `406 
f B "i2c_start" 1 513 "void(int8 stream,int8 restart)" `404 
f N "i2c_stop" 1 514 ""
f B "i2c_stop" 1 514 "void()" `407 
f N "i2c_stop" 1 515 ""
v L "stream" 1 515 "int8" `409 
f B "i2c_stop" 1 515 "void(int8 stream)" `408 
f N "i2c_isr_state" 1 516 ""
f B "i2c_isr_state" 1 516 "int8()" `410 
f N "i2c_slaveaddr" 1 517 ""
v L "addr" 1 517 "int8" `412 
f B "i2c_slaveaddr" 1 517 "void(int8 addr)" `411 
f N "i2c_slaveaddr" 1 518 ""
v L "stream" 1 518 "int8" `414 
v L "addr" 1 518 "int8" `415 
f B "i2c_slaveaddr" 1 518 "void(int8 stream,int8 addr)" `413 
f N "i2c_poll" 1 519 ""
f B "i2c_poll" 1 519 "int8()" `416 
f N "i2c_poll" 1 520 ""
v L "stream" 1 520 "int8" `418 
f B "i2c_poll" 1 520 "int8(int8 stream)" `417 
f N "i2c_init" 1 521 ""
v L "baud" 1 521 "int32" `420 
f B "i2c_init" 1 521 "void(int32 baud)" `419 
f N "i2c_init" 1 522 ""
v L "stream" 1 522 "int8" `422 
v L "baud" 1 522 "int32" `423 
f B "i2c_init" 1 522 "void(int8 stream,int32 baud)" `421  "#use spi() Prototypes:"
f N "spi_xfer" 1 525 ""
f B "spi_xfer" 1 525 "int8()" `424 
f N "spi_xfer" 1 526 ""
f G "spi_xfer" 1 526 "int16()" `425 
f N "spi_xfer" 1 527 ""
f G "spi_xfer" 1 527 "int32()" `425 
f N "spi_xfer" 1 528 ""
v L "data" 1 528 "int8" `426 
f B "spi_xfer" 1 528 "int8(int8 data)" `425 
f N "spi_xfer" 1 529 ""
v L "data" 1 529 "int16" `428 
f B "spi_xfer" 1 529 "int16(int16 data)" `427 
f N "spi_xfer" 1 530 ""
v L "data" 1 530 "int32" `430 
f B "spi_xfer" 1 530 "int32(int32 data)" `429 
f N "spi_xfer" 1 531 ""
v L "stream" 1 531 "int8" `432 
v L "data" 1 531 "int8" `433 
f B "spi_xfer" 1 531 "int8(int8 stream,int8 data)" `431 
f N "spi_xfer" 1 532 ""
v L "stream" 1 532 "int8" `435 
v L "data" 1 532 "int16" `436 
f B "spi_xfer" 1 532 "int16(int8 stream,int16 data)" `434 
f N "spi_xfer" 1 533 ""
v L "stream" 1 533 "int8" `438 
v L "data" 1 533 "int32" `439 
f B "spi_xfer" 1 533 "int32(int8 stream,int32 data)" `437 
f N "spi_xfer" 1 534 ""
v L "stream" 1 534 "int8" `441 
v L "data" 1 534 "int8" `442 
v L "bits" 1 534 "int8" `443 
f B "spi_xfer" 1 534 "int8(int8 stream,int8 data,int8 bits)" `440 
f N "spi_xfer" 1 535 ""
v L "stream" 1 535 "int8" `445 
v L "data" 1 535 "int16" `446 
v L "bits" 1 535 "int8" `447 
f B "spi_xfer" 1 535 "int16(int8 stream,int16 data,int8 bits)" `444 
f N "spi_xfer" 1 536 ""
v L "stream" 1 536 "int8" `449 
v L "data" 1 536 "int32" `450 
v L "bits" 1 536 "int8" `451 
f B "spi_xfer" 1 536 "int32(int8 stream,int32 data,int8 bits)" `448 
f N "spi_init" 1 537 ""
v L "baud" 1 537 "int32" `453 
f B "spi_init" 1 537 "void(int32 baud)" `452 
f N "spi_init" 1 538 ""
v L "stream" 1 538 "int8" `455 
v L "baud" 1 538 "int32" `456 
f B "spi_init" 1 538 "void(int8 stream,int32 baud)" `454 
f N "spi_speed" 1 539 ""
v L "baud" 1 539 "int32" `458 
f B "spi_speed" 1 539 "void(int32 baud)" `457 
f N "spi_speed" 1 540 ""
v L "stream" 1 540 "int8" `460 
v L "baud" 1 540 "int32" `461 
f B "spi_speed" 1 540 "void(int8 stream,int32 baud)" `459 
f N "spi_speed" 1 541 ""
v L "stream" 1 541 "int8" `463 
v L "baud" 1 541 "int32" `464 
v L "clock" 1 541 "int32" `465 
f B "spi_speed" 1 541 "void(int8 stream,int32 baud,int32 clock)" `462 
f N "spi_prewrite" 1 542 ""
v L "data" 1 542 "int8" `467 
f B "spi_prewrite" 1 542 "void(int8 data)" `466 
f N "spi_prewrite" 1 543 ""
v L "data" 1 543 "int16" `469 
f B "spi_prewrite" 1 543 "void(int16 data)" `468 
f N "spi_prewrite" 1 544 ""
v L "data" 1 544 "int32" `471 
f B "spi_prewrite" 1 544 "void(int32 data)" `470 
f N "spi_prewrite" 1 545 ""
v L "??65535" 1 545 "int8" `473 
v L "data" 1 545 "int8" `474 
f B "spi_prewrite" 1 545 "void(int8 ,int8 data)" `472 
f N "spi_prewrite" 1 546 ""
v L "??65535" 1 546 "int8" `476 
v L "data" 1 546 "int16" `477 
f B "spi_prewrite" 1 546 "void(int8 ,int16 data)" `475 
f N "spi_prewrite" 1 547 ""
v L "??65535" 1 547 "int8" `479 
v L "data" 1 547 "int32" `480 
f B "spi_prewrite" 1 547 "void(int8 ,int32 data)" `478 
f N "spi_xfer_in" 1 548 ""
f B "spi_xfer_in" 1 548 "int8()" `481 
f N "spi_xfer_in" 1 549 ""
f G "spi_xfer_in" 1 549 "int16()" `482 
f N "spi_xfer_in" 1 550 ""
f G "spi_xfer_in" 1 550 "int32()" `482 
f N "spi_xfer_in" 1 551 ""
v L "bits" 1 551 "int8" `483 
f B "spi_xfer_in" 1 551 "int8(int8 bits)" `482 
f N "spi_xfer_in" 1 552 ""
v L "bits" 1 552 "int8" `485 
f G "spi_xfer_in" 1 552 "int16(int8 bits)" `484 
f N "spi_xfer_in" 1 553 ""
v L "bits" 1 553 "int8" `485 
f G "spi_xfer_in" 1 553 "int32(int8 bits)" `484 
f N "spi_xfer_in" 1 554 ""
v L "stream" 1 554 "int8" `485 
v L "bits" 1 554 "int8" `486 
f B "spi_xfer_in" 1 554 "int8(int8 stream,int8 bits)" `484 
f N "spi_xfer_in" 1 555 ""
v L "stream" 1 555 "int8" `485 
v L "bits" 1 555 "int8" `489 
f G "spi_xfer_in" 1 555 "int16(int8 stream,int8 bits)" `487 
f N "spi_xfer_in" 1 556 ""
v L "stream" 1 556 "int8" `485 
v L "bits" 1 556 "int8" `489 
f G "spi_xfer_in" 1 556 "int32(int8 stream,int8 bits)" `487  "#use rtos() Prototypes:"
f N "rtos_run" 1 559 ""
f B "rtos_run" 1 559 "void(int8 stream,int8 bits)" `487 
f N "rtos_yield" 1 560 ""
f B "rtos_yield" 1 560 "void(int8 bits)" `488 
f N "rtos_enable" 1 561 ""
v L "task" 1 561 "int8" `490 
f B "rtos_enable" 1 561 "void(int8 task)" `489 
f N "rtos_disable" 1 562 ""
v L "task" 1 562 "int8" `492 
f B "rtos_disable" 1 562 "void(int8 task)" `491 
f N "rtos_terminate" 1 563 ""
f B "rtos_terminate" 1 563 "void()" `493 
f N "rtos_await" 1 564 ""
v L "flag" 1 564 "int8" `495 
f B "rtos_await" 1 564 "void(int8 flag)" `494 
f N "rtos_wait" 1 565 ""
v L "sem" 1 565 "int8" `497 
f B "rtos_wait" 1 565 "void(int8 sem)" `496 
f N "rtos_signal" 1 566 ""
v L "sem" 1 566 "int8" `499 
f B "rtos_signal" 1 566 "void(int8 sem)" `498 
f N "rtos_msg_send" 1 567 ""
v L "task" 1 567 "int8" `501 
v L "msg" 1 567 "int8" `502 
f B "rtos_msg_send" 1 567 "void(int8 task,int8 msg)" `500 
f N "rtos_msg_read" 1 568 ""
f B "rtos_msg_read" 1 568 "int8()" `503 
f N "rtos_msg_poll" 1 569 ""
f B "rtos_msg_poll" 1 569 "int8()" `504 
f N "rtos_overrun" 1 570 ""
v L "task" 1 570 "int8" `506 
f B "rtos_overrun" 1 570 "int8(int8 task)" `505 
f N "rtos_stats" 1 571 ""
v L "task" 1 571 "int8" `508 
v L "stat" 1 571 "*int8" `509 
f B "rtos_stats" 1 571 "void(int8 task,*int8 stat)" `507  "#use timer() Prototypes:"
f N "get_ticks" 1 574 ""
f B "get_ticks" 1 574 "int8()" `510 
f N "get_ticks" 1 575 ""
f G "get_ticks" 1 575 "int16()" `511 
f N "get_ticks" 1 576 ""
f G "get_ticks" 1 576 "int32()" `511 
f N "get_ticks" 1 577 ""
v L "stream" 1 577 "int8" `512 
f B "get_ticks" 1 577 "int8(int8 stream)" `511 
f N "get_ticks" 1 578 ""
v L "stream" 1 578 "int8" `514 
f G "get_ticks" 1 578 "int16(int8 stream)" `513 
f N "get_ticks" 1 579 ""
v L "stream" 1 579 "int8" `514 
f G "get_ticks" 1 579 "int32(int8 stream)" `513 
f N "set_ticks" 1 580 ""
v L "value" 1 580 "int8" `514 
f B "set_ticks" 1 580 "void(int8 value)" `513 
f N "set_ticks" 1 581 ""
v L "value" 1 581 "int16" `516 
f B "set_ticks" 1 581 "void(int16 value)" `515 
f N "set_ticks" 1 582 ""
v L "value" 1 582 "int32" `518 
f B "set_ticks" 1 582 "void(int32 value)" `517 
f N "set_ticks" 1 583 ""
v L "stream" 1 583 "int8" `520 
v L "value" 1 583 "int8" `521 
f B "set_ticks" 1 583 "void(int8 stream,int8 value)" `519 
f N "set_ticks" 1 584 ""
v L "stream" 1 584 "int8" `523 
v L "value" 1 584 "int16" `524 
f B "set_ticks" 1 584 "void(int8 stream,int16 value)" `522 
f N "set_ticks" 1 585 ""
v L "stream" 1 585 "int8" `526 
v L "value" 1 585 "int32" `527 
f B "set_ticks" 1 585 "void(int8 stream,int32 value)" `525  "#use pwm() Prototypes:"
f N "pwm_on" 1 588 ""
f B "pwm_on" 1 588 "void()" `528 
f N "pwm_on" 1 589 ""
v L "stream" 1 589 "int8" `530 
f B "pwm_on" 1 589 "void(int8 stream)" `529 
f N "pwm_off" 1 590 ""
f B "pwm_off" 1 590 "void()" `531 
f N "pwm_off" 1 591 ""
v L "stream" 1 591 "int8" `533 
f B "pwm_off" 1 591 "void(int8 stream)" `532 
f N "pwm_set_duty" 1 592 ""
v L "duty" 1 592 "int16" `535 
f B "pwm_set_duty" 1 592 "void(int16 duty)" `534 
f N "pwm_set_duty" 1 593 ""
v L "stream" 1 593 "int8" `537 
v L "duty" 1 593 "int16" `538 
f B "pwm_set_duty" 1 593 "void(int8 stream,int16 duty)" `536 
f N "pwm_set_duty_percent" 1 594 ""
v L "percent" 1 594 "int16" `540 
f B "pwm_set_duty_percent" 1 594 "void(int16 percent)" `539 
f N "pwm_set_duty_percent" 1 595 ""
v L "stream" 1 595 "int8" `542 
v L "percent" 1 595 "int16" `543 
f B "pwm_set_duty_percent" 1 595 "void(int8 stream,int16 percent)" `541 
f N "pwm_set_frequency" 1 596 ""
v L "frequency" 1 596 "int32" `545 
f B "pwm_set_frequency" 1 596 "void(int32 frequency)" `544 
f N "pwm_set_frequency" 1 597 ""
v L "stream" 1 597 "int8" `547 
v L "frequency" 1 597 "int32" `548 
f B "pwm_set_frequency" 1 597 "void(int8 stream,int32 frequency)" `546  "#use capture() Prototypes:"
f N "get_capture_time" 1 600 ""
f B "get_capture_time" 1 600 "int16()" `549 
f N "get_capture_time" 1 601 ""
v L "stream" 1 601 "int8" `551 
f B "get_capture_time" 1 601 "int16(int8 stream)" `550 
f N "get_capture_event" 1 602 ""
f B "get_capture_event" 1 602 "int8()" `552 
f N "get_capture_event" 1 603 ""
v L "stream" 1 603 "int8" `554 
f B "get_capture_event" 1 603 "int8(int8 stream)" `553  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 616 ""
v L "address" 1 616 "int16" `556 
f B "goto_address" 1 616 "void(int16 address)" `555 
f N "label_address" 1 617 ""
v L "label" 1 617 "int16" `558 
f B "label_address" 1 617 "int16(int16 label)" `557  "Program Memory Prototypes:"
f N "read_program_memory" 1 620 ""
v L "address" 1 620 "int16" `560 
v L "dataptr" 1 620 "*int8" `561 
v L "count" 1 620 "int16" `562 
f B "read_program_memory" 1 620 "void(int16 address,*int8 dataptr,int16 count)" `559 
f N "read_program_eeprom" 1 621 ""
v L "address" 1 621 "int16" `564 
f B "read_program_eeprom" 1 621 "int16(int16 address)" `563 
f N "write_program_memory" 1 622 ""
v L "address" 1 622 "int16" `566 
v L "dataptr" 1 622 "*int8" `567 
v L "count" 1 622 "int16" `568 
f B "write_program_memory" 1 622 "void(int16 address,*int8 dataptr,int16 count)" `565 
f N "write_program_eeprom" 1 623 ""
v L "address" 1 623 "int16" `570 
v L "data" 1 623 "int16" `571 
f B "write_program_eeprom" 1 623 "void(int16 address,int16 data)" `569  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 628 "unsigned int16"
f N "read_eeprom" 1 633 ""
v L "address" 1 633 "int16" `573 
f B "read_eeprom" 1 633 "int8(int16 address)" `572 
f N "write_eeprom" 1 634 ""
v L "address" 1 634 "int16" `575 
v L "value" 1 634 "int8" `576 
f B "write_eeprom" 1 634 "void(int16 address,int8 value)" `574  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 641 ""
v L "interrupt" 1 641 "int32" `578 
f B "enable_interrupts" 1 641 "void(int32 interrupt)" `577 
f N "disable_interrupts" 1 642 ""
v L "interrupt" 1 642 "int32" `580 
f B "disable_interrupts" 1 642 "void(int32 interrupt)" `579 
f N "clear_interrupt" 1 643 ""
v L "interrupt" 1 643 "int32" `582 
f B "clear_interrupt" 1 643 "void(int32 interrupt)" `581 
f N "interrupt_active" 1 644 ""
v L "interrupt" 1 644 "int32" `584 
f B "interrupt_active" 1 644 "int8(int32 interrupt)" `583 
f N "interrupt_enabled" 1 645 ""
v L "interrupt" 1 645 "int32" `586 
f B "interrupt_enabled" 1 645 "int8(int32 interrupt)" `585 
f N "ext_int_edge" 1 646 ""
v L "source" 1 646 "int8" `588 
v L "edge" 1 646 "int8" `589 
f B "ext_int_edge" 1 646 "void(int8 source,int8 edge)" `587 
f N "jump_to_isr" 1 647 ""
v L "address" 1 647 "int16" `591 
f B "jump_to_isr" 1 647 "void(int16 address)" `590  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 649 "0x40"
d G "H_TO_L" 1 650 "0"
d G "GLOBAL" 1 652 "0x0BC0"
d G "PERIPH" 1 653 "0x0B40"
d G "INT_RTCC" 1 654 "0x000B20"
d G "INT_RB" 1 655 "0x00FF0B08"
d G "INT_EXT_L2H" 1 656 "0x50000B10"
d G "INT_EXT_H2L" 1 657 "0x60000B10"
d G "INT_EXT" 1 658 "0x000B10"
d G "INT_AD" 1 659 "0x008C40"
d G "INT_TBE" 1 660 "0x008C10"
d G "INT_RDA" 1 661 "0x008C20"
d G "INT_TIMER1" 1 662 "0x008C01"
d G "INT_TIMER2" 1 663 "0x008C02"
d G "INT_CCP1" 1 664 "0x008C04"
d G "INT_CCP2" 1 665 "0x008D01"
d G "INT_SSP" 1 666 "0x008C08"
d G "INT_PSP" 1 667 "0x008C80"
d G "INT_BUSCOL" 1 668 "0x008D08"
d G "INT_EEPROM" 1 669 "0x008D10"
d G "INT_TIMER0" 1 670 "0x000B20"
d G "INT_COMP" 1 671 "0x008D40"
D G "HDM64GS12" 2 63 ""
D G "GLCD_WIDTH" 2 66 "128"
D G "GLCD_CS1" 2 70 "PIN_B0" "Chip Selection 1"
D G "GLCD_CS2" 2 74 "PIN_B1" "Chip Selection 2"
D G "GLCD_DI" 2 78 "PIN_B2" "Data or Instruction input"
D G "GLCD_RW" 2 82 "PIN_B4" "Read/Write"
D G "GLCD_E" 2 86 "PIN_B5" "Enable"
D G "GLCD_RST" 2 90 "PIN_C0" "Reset"
D G "GLCD_LEFT" 2 93 "0"
D G "GLCD_RIGHT" 2 94 "1"
D G "ON" 2 97 "1"
D G "OFF" 2 101 "0"
C L "jump_to_isr" 2 2 1 "FUNCTION"
F N "glcd_init" 2 107 ""
V L "mode" 2 107 "int8" `597 
f G "glcd_init" 2 107 "void(int8 mode)" `596 
F N "glcd_pixel" 2 108 ""
V L "x" 2 108 "int8" `599 
V L "y" 2 108 "int8" `600 
V L "color" 2 108 "int8" `601 
f G "glcd_pixel" 2 108 "void(int8 x,int8 y,int8 color)" `598 
F N "glcd_fillScreen" 2 109 ""
V L "color" 2 109 "int8" `603 
f G "glcd_fillScreen" 2 109 "void(int8 color)" `602 
F N "glcd_writeByte" 2 110 ""
V L "side" 2 110 "int8" `605 
V L "data" 2 110 "int8" `606 
f G "glcd_writeByte" 2 110 "void(int8 side,int8 data)" `604 
F N "glcd_readByte" 2 111 ""
V L "side" 2 111 "int8" `608 
f G "glcd_readByte" 2 111 "int8(int8 side)" `607 
F N "glcd_update" 2 112 ""
f G "glcd_update" 2 112 "void()" `609  "Purpose:       Initialize the LCD."
C L "glcd_update" 2 2 3 "FUNCTION"
F N "glcd_init" 2 128 ""
V L "mode" 2 128 "int8" `611 
F G "glcd_init" 2 129 "void(int8 mode)" `596  "Initialze some pins"
C L "glcd_init" 2 2 1 "FUNCTION"
C L "glcd_init" 2 2 1 "FUNCTION"
C L "glcd_init" 2 2 1 "FUNCTION"
C L "glcd_init" 2 2 1 "FUNCTION"
C L "glcd_init" 2 2 1 "FUNCTION"
C L "glcd_init" 2 2 1 "FUNCTION"
C L "glcd_init" 2 2 1 "FUNCTION"
C L "glcd_init" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 5 "FUNCTION"
F N "glcd_pixel" 2 198 ""
V L "x" 2 198 "int8" `599 
V L "y" 2 198 "int8" `600 
V L "color" 2 198 "int8" `614 
F G "glcd_pixel" 2 226 "void(int8 x,int8 y,int8 color)" `598 
V L "data" 2 227 "int8" `611 
V L "side" 2 228 "int1" `612 
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_pixel" 2 2 1 "FUNCTION"
C L "glcd_fillScreen" 2 2 3 "FUNCTION"
F N "glcd_fillScreen" 2 261 ""
V L "color" 2 261 "int8" `614 
F G "glcd_fillScreen" 2 279 "void(int8 color)" `602 
V L "i" 2 280 "int8" `613 
V L "j" 2 280 "int8" `614  "Loop through the vertical pages"
C L "glcd_fillScreen" 2 2 1 "FUNCTION"
C L "glcd_fillScreen" 2 2 1 "FUNCTION"
C L "glcd_fillScreen" 2 2 1 "FUNCTION"
C L "glcd_fillScreen" 2 2 2 "FUNCTION"
C L "glcd_fillScreen" 2 2 1 "FUNCTION"
C L "glcd_fillScreen" 2 2 1 "FUNCTION"
C L "glcd_writeByte" 2 2 3 "FUNCTION"
F N "glcd_writeByte" 2 306 ""
V L "side" 2 306 "int8" `605 
V L "data" 2 306 "int8" `620 
F G "glcd_writeByte" 2 307 "void(int8 side,int8 data)" `604 
C L "glcd_writeByte" 2 2 1 "FUNCTION"
C L "glcd_writeByte" 2 2 1 "FUNCTION"
C L "glcd_writeByte" 2 2 1 "FUNCTION"
C L "glcd_writeByte" 2 2 1 "FUNCTION"
C L "glcd_writeByte" 2 2 1 "FUNCTION"
C L "glcd_readByte" 2 2 2 "FUNCTION"
F N "glcd_readByte" 2 332 ""
V L "side" 2 332 "int8" `619 
F G "glcd_readByte" 2 333 "int8(int8 side)" `607 
V L "data" 2 334 "int8" `618  "Stores the data read from the LCD"
C L "glcd_readByte" 2 2 1 "FUNCTION"
C L "glcd_readByte" 2 2 1 "FUNCTION"
C L "glcd_readByte" 2 2 1 "FUNCTION"
C L "glcd_readByte" 2 2 1 "FUNCTION"
C L "glcd_readByte" 2 2 1 "FUNCTION"
C L "glcd_readByte" 2 2 1 "FUNCTION"
C L "glcd_readByte" 2 2 1 "FUNCTION"
D G "GRAPHICS_DRAWING_FUNCTIONS" 3 59 ""
D G "YES" 3 73 "1"
D G "NO" 3 77 "0"
V G "FONT" 3 85 "[51][5]" `620 
V G "FONT2" 3 137 "[44][5]" `624 
C L "glcd_line" 3 2 6 "FUNCTION"
F N "glcd_line" 3 195 ""
V L "x1" 3 195 "int8" `628 
V L "y1" 3 195 "int8" `629 
V L "x2" 3 195 "int8" `630 
V L "y2" 3 195 "int8" `631 
V L "color" 3 195 "int8" `632 
F G "glcd_line" 3 197 "void(int8 x1,int8 y1,int8 x2,int8 y2,int8 color)" `627 
V L "dy" 3 198 "int16" `633 
V L "dx" 3 198 "int16" `634 
V L "addx" 3 199 "sint8" `635 
V L "addy" 3 199 "sint8" `636 
V L "P" 3 200 "sint16" `637 
V L "diff" 3 200 "sint16" `638 
V L "i" 3 207 "int8" `639 
C L "glcd_rect" 3 2 6 "FUNCTION"
F N "glcd_rect" 3 277 ""
V L "x1" 3 277 "int8" `641 
V L "y1" 3 277 "int8" `642 
V L "x2" 3 277 "int8" `643 
V L "y2" 3 277 "int8" `644 
V L "fill" 3 277 "int8" `645 
V L "color" 3 277 "int8" `646 
F G "glcd_rect" 3 279 "void(int8 x1,int8 y1,int8 x2,int8 y2,int8 fill,int8 color)" `640 
V L "i" 3 285 "int8" `647 
V L "xmin" 3 285 "int8" `648 
V L "xmax" 3 285 "int8" `649 
V L "ymin" 3 285 "int8" `650 
V L "ymax" 3 285 "int8" `651 
C L "glcd_rect" 3 2 1 "FUNCTION"
C L "glcd_rect" 3 2 1 "FUNCTION"
C L "glcd_rect" 3 2 1 "FUNCTION"
C L "glcd_bar" 3 2 5 "FUNCTION"
F N "glcd_bar" 3 337 ""
V L "x1" 3 337 "int8" `653 
V L "y1" 3 337 "int8" `654 
V L "x2" 3 337 "int8" `655 
V L "y2" 3 337 "int8" `656 
V L "width" 3 337 "int8" `657 
V L "color" 3 337 "int8" `658 
F G "glcd_bar" 3 339 "void(int8 x1,int8 y1,int8 x2,int8 y2,int8 width,int8 color)" `652 
V L "half_width" 3 340 "int8" `659 
V L "dy" 3 341 "sint16" `660 
V L "dx" 3 341 "sint16" `661 
V L "addx" 3 342 "sint8" `662 
V L "addy" 3 342 "sint8" `663 
V L "j" 3 342 "sint8" `664 
V L "P" 3 343 "sint16" `665 
V L "diff" 3 343 "sint16" `666 
V L "c1" 3 343 "sint16" `667 
V L "c2" 3 343 "sint16" `668 
V L "i" 3 350 "int8" `669 
V L "temp" 3 361 "sint16" `673 
V L "temp" 3 369 "sint16" `674 
C L "glcd_circle" 3 2 5 "FUNCTION"
F N "glcd_circle" 3 437 ""
V L "x" 3 437 "int8" `676 
V L "y" 3 437 "int8" `677 
V L "radius" 3 437 "int8" `678 
V L "fill" 3 437 "int8" `679 
V L "color" 3 437 "int8" `680 
F G "glcd_circle" 3 439 "void(int8 x,int8 y,int8 radius,int8 fill,int8 color)" `675 
V L "a" 3 443 "sint8" `681 
V L "b" 3 443 "sint8" `682 
V L "P" 3 443 "sint8" `683 
C L "glcd_text57" 3 2 5 "FUNCTION"
F N "glcd_text57" 3 489 ""
V L "x" 3 489 "int8" `685 
V L "y" 3 489 "int8" `686 
V L "textptr" 3 489 "*int8" `687 
V L "size" 3 489 "int8" `688 
V L "color" 3 489 "int8" `689 
F G "glcd_text57" 3 491 "void(int8 x,int8 y,*int8 textptr,int8 size,int8 color)" `684 
V L "j" 3 492 "int8" `690 
V L "k" 3 492 "int8" `691 
V L "l" 3 492 "int8" `692 
V L "m" 3 492 "int8" `693  "Loop counters"
V L "pixelData" 3 493 "int8[5]" `694  "Stores character data"
C L "glcd_text57" 3 2 1 "FUNCTION"
C L "glcd_text57" 3 2 1 "FUNCTION"
C L "glcd_text57" 3 2 1 "FUNCTION"
C L "glcd_text57" 3 2 2 "FUNCTION"
C L "glcd_text57" 3 2 1 "FUNCTION"
C L "glcd_text57" 3 2 1 "FUNCTION"
C L "glcd_text57" 3 2 1 "FUNCTION"
C L "glcd_text57" 3 2 1 "FUNCTION"
C L "glcd_text57" 3 2 1 "FUNCTION"
C L "glcd_text57" 3 2 1 "FUNCTION"
C L "glcd_text57" 3 2 1 "FUNCTION"
C L "glcd_text57" 3 2 1 "FUNCTION"
C L "glcd_text57" 3 2 1 "FUNCTION"
D G "_STDLIB" 4 12 ""
D G "RAND_MAX" 4 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 4 25 "1"
T G "div_t" 4 33 "{sint8 quot,sint8 rem}" `698 
T G "ldiv_t" 4 38 "{sint16 quot,sint16 rem}" `702  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 5 13 ""
D G "ptrdiff_t" 5 18 "unsigned int16"
D G "size_t" 5 22 "unsigned int8"
D G "wchar_t" 5 26 "char"
D G "NULL" 5 27 "0"
D G "offsetof" 5 29 "(s,f) (offsetofbit(s,f)/8)"
C L "atoi" 4 43 2 "FUNCTION"
C L "atoi" 4 46 1 "*"
C L "atoi" 4 46 1 "*"
F N "atoi" 4 50 ""
V L "s" 4 50 "*int8" `704 
f G "atoi" 4 50 "sint8(*int8 s)" `703  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 4 58 ""
V L "s" 4 58 "*int8" `706 
f G "atoi32" 4 58 "sint32(*int8 s)" `705  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 4 46 2 "FUNCTION"
F N "itoa" 4 79 ""
V L "num" 4 79 "sint32" `708 
V L "base" 4 79 "int8" `709 
V L "s" 4 79 "*int8" `710 
f G "itoa" 4 79 "*int8(sint32 num,int8 base,*int8 s)" `707  "Standard template: signed int16  atol(char * s)"
C L "itoa" 4 81 1 "*"
C L "itoa" 4 81 1 "*"
F N "atol" 4 85 ""
V L "s" 4 85 "*int8" `712 
f G "atol" 4 85 "sint16(*int8 s)" `711  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 4 87 1 "*"
C L "atol" 4 87 1 "*"
C L "atol" 4 87 1 "*"
C L "atol" 4 87 1 "*"
F N "strtol" 4 93 ""
V L "s" 4 93 "*int8" `714 
V L "endptr" 4 93 "*int8" `715 
V L "base" 4 93 "sint8" `716 
f G "strtol" 4 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `713  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 4 95 1 "*"
C L "strtol" 4 95 1 "*"
C L "strtol" 4 95 1 "*"
C L "strtol" 4 95 1 "*"
F N "strtoul" 4 101 ""
V L "s" 4 101 "*int8" `718 
V L "endptr" 4 101 "*int8" `719 
V L "base" 4 101 "sint8" `720 
f G "strtoul" 4 101 "int16(*int8 s,*int8 endptr,sint8 base)" `717  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 4 95 2 "FUNCTION"
C L "strtoul" 4 103 1 "*"
C L "strtoul" 4 103 1 "*"
C L "strtoul" 4 103 1 "*"
F N "strtof" 4 110 ""
V L "s" 4 110 "*int8" `722 
V L "endptr" 4 110 "*int8" `723 
f G "strtof" 4 110 "float(*int8 s,*int8 endptr)" `721  "provided for compatibility"
D G "strtof48" 4 116 "(s,e) strtof(s, e)"
D G "strtod" 4 117 "(s,e) strtof(s, e)"
C L "strtof" 4 103 1 "FUNCTION"
C L "strtof" 4 120 1 "*"
D G "atof" 4 124 "(s)   strtof(s, 0)"
C L "strtof" 4 120 1 "FUNCTION"
C L "strtof" 4 143 1 "*"
C L "strtof" 4 143 1 "*"
C L "strtof" 4 143 1 "*"
F N "atoe" 4 149 ""
V L "s" 4 149 "*int8" `725 
f G "atoe" 4 149 "float(*int8 s)" `724  "Pseudo-random sequence generation functions"
C L "atoe" 4 143 1 "FUNCTION"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
C L "atoe" 4 160 1 "*"
F N "rand" 4 169 ""
f G "rand" 4 169 "int16()" `726  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
C L "rand" 4 171 1 "*"
F N "srand" 4 191 ""
V L "seed" 4 191 "int32" `728 
f G "srand" 4 191 "void(int32 seed)" `727  "Memory management functions"
C L "srand" 4 171 3 "FUNCTION"
F N "system" 4 205 ""
V L "string" 4 205 "*int8" `730 
f G "system" 4 205 "sint8(*int8 string)" `729  "Searching and sorting utilities"
C L "system" 4 171 1 "FUNCTION"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 1 "*"
C L "system" 4 211 4 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
C L "system" 4 229 1 "*"
D G "labs" 4 249 "abs"
F N "div" 4 251 ""
V L "numer" 4 251 "sint8" `732 
V L "denom" 4 251 "sint8" `733 
f G "div" 4 251 "div_t(sint8 numer,sint8 denom)" `731 
F N "ldiv" 4 252 ""
V L "numer" 4 252 "sint16" `735 
V L "denom" 4 252 "sint16" `736 
f G "ldiv" 4 252 "ldiv_t(sint16 numer,sint16 denom)" `734  "Multibyte character functions"
C L "ldiv" 4 229 4 "FUNCTION"
C L "ldiv" 5 2 7 "FUNCTION"
D G "_STRING" 6 12 ""
C L "ldiv" 5 2 7 "FUNCTION"
D G "_CTYPE" 7 12 ""
D G "islower" 7 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 7 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 7 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 7 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 7 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 7 19 "(x)  ((x)==' ')"
D G "isxdigit" 7 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 7 21 "(x)  ((x)<' ')"
D G "isprint" 7 22 "(x)  ((x)>=' ')"
D G "isgraph" 7 23 "(x)  ((x)>' ')"
D G "ispunct" 7 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 6 19 10 "FUNCTION"
F N "memmove" 6 34 ""
V L "s1" 6 34 "*int8" `738 
V L "s2" 6 34 "*int8" `739 
V L "n" 6 34 "int8" `740 
F G "memmove" 6 35 "*int8(*int8 s1,*int8 s2,int8 n)" `737 
V L "sc1" 6 36 "*int8" `741 
V L "sc2" 6 37 "*int8" `742 
D G "strcopy" 6 54 "strcpy"
F N "strncpy" 6 61 ""
V L "s1" 6 61 "*int8" `744 
V L "s2" 6 61 "*int8" `745 
V L "n" 6 61 "int8" `746 
F G "strncpy" 6 62 "*int8(*int8 s1,*int8 s2,int8 n)" `743 
V L "s" 6 63 "*int8" `747 
F N "strcat" 6 78 ""
V L "s1" 6 78 "*int8" `749 
V L "s2" 6 78 "*int8" `750 
F G "strcat" 6 79 "*int8(*int8 s1,*int8 s2)" `748 
V L "s" 6 80 "*int8" `751 
F N "strncat" 6 96 ""
V L "s1" 6 96 "*int8" `753 
V L "s2" 6 96 "*int8" `754 
V L "n" 6 96 "int8" `755 
F G "strncat" 6 97 "*int8(*int8 s1,*int8 s2,int8 n)" `752 
V L "s" 6 98 "*int8" `756 
C L "memcmp" 6 19 3 "FUNCTION"
F N "memcmp" 6 120 ""
V L "s1" 6 120 "*int8" `758 
V L "s2" 6 120 "*int8" `759 
V L "n" 6 120 "int8" `760 
F G "memcmp" 6 121 "sint8(*int8 s1,*int8 s2,int8 n)" `757 
V L "su1" 6 122 "*int8" `761 
V L "su2" 6 122 "*int8" `762 
C L "strcmp" 6 19 2 "FUNCTION"
F N "strcmp" 6 134 ""
V L "s1" 6 134 "*int8" `764 
V L "s2" 6 134 "*int8" `765 
F G "strcmp" 6 135 "sint8(*int8 s1,*int8 s2)" `763 
C L "strcoll" 6 19 2 "FUNCTION"
F N "strcoll" 6 144 ""
V L "s1" 6 144 "*int8" `767 
V L "s2" 6 144 "*int8" `768 
F G "strcoll" 6 145 "sint8(*int8 s1,*int8 s2)" `766 
C L "strncmp" 6 19 4 "FUNCTION"
F N "strncmp" 6 157 ""
V L "s1" 6 157 "*int8" `770 
V L "s2" 6 157 "*int8" `771 
V L "n" 6 157 "int8" `772 
F G "strncmp" 6 158 "sint8(*int8 s1,*int8 s2,int8 n)" `769 
C L "strxfrm" 6 19 4 "FUNCTION"
F N "strxfrm" 6 170 ""
V L "s1" 6 170 "*int8" `774 
V L "s2" 6 170 "*int8" `775 
V L "n" 6 170 "int8" `776 
F G "strxfrm" 6 171 "int8(*int8 s1,*int8 s2,int8 n)" `773 
V L "c" 6 172 "int8" `777 
V L "n1" 6 173 "int8" `778 
C L "strxfrm" 6 19 1 "FUNCTION"
F N "memchr" 6 201 ""
V L "s" 6 201 "*int8" `780 
V L "c" 6 201 "int8" `781 
V L "n" 6 201 "int8" `782 
F G "memchr" 6 202 "*int8(*int8 s,int8 c,int8 n)" `779 
V L "uc" 6 203 "int8" `783 
V L "su" 6 204 "*int8" `784 
F N "strchr" 6 215 ""
V L "s" 6 215 "*int8" `786 
V L "c" 6 215 "int8" `787 
F G "strchr" 6 216 "*int8(*int8 s,int8 c)" `785 
C L "strcspn" 6 19 4 "FUNCTION"
F N "strcspn" 6 227 ""
V L "s1" 6 227 "*int8" `789 
V L "s2" 6 227 "*int8" `790 
F G "strcspn" 6 228 "int8(*int8 s1,*int8 s2)" `788 
V L "sc1" 6 229 "*int8" `791 
V L "sc2" 6 229 "*int8" `792 
F N "strpbrk" 6 242 ""
V L "s1" 6 242 "*int8" `794 
V L "s2" 6 242 "*int8" `795 
F G "strpbrk" 6 243 "*int8(*int8 s1,*int8 s2)" `793 
V L "sc1" 6 244 "*int8" `796 
V L "sc2" 6 244 "*int8" `797 
F N "strrchr" 6 257 ""
V L "s" 6 257 "*int8" `799 
V L "c" 6 257 "int8" `800 
F G "strrchr" 6 258 "*int8(*int8 s,int8 c)" `798 
V L "P" 6 259 "*int8" `801 
C L "strspn" 6 19 2 "FUNCTION"
F N "strspn" 6 272 ""
V L "s1" 6 272 "*int8" `803 
V L "s2" 6 272 "*int8" `804 
F G "strspn" 6 273 "int8(*int8 s1,*int8 s2)" `802 
V L "sc1" 6 274 "*int8" `805 
V L "sc2" 6 274 "*int8" `806 
F N "strstr" 6 291 ""
V L "s1" 6 291 "*int8" `808 
V L "s2" 6 291 "*int8" `809 
F G "strstr" 6 292 "*int8(*int8 s1,*int8 s2)" `807 
V L "s" 6 293 "*int8" `810 
V L "t" 6 293 "*int8" `811 
C L "strlen" 6 19 2 "FUNCTION"
F N "strlen" 6 318 ""
V L "s" 6 318 "*int8" `813 
F G "strlen" 6 319 "int8(*int8 s)" `812 
V L "sc" 6 320 "*int8" `814 
F N "strtok" 6 341 ""
V L "s1" 6 341 "*int8" `816 
V L "s2" 6 341 "*int8" `817 
F G "strtok" 6 342 "*int8(*int8 s1,*int8 s2)" `815 
V L "beg" 6 343 "*int8" `818 
V L "end" 6 343 "*int8" `819 
V L "save" 6 344 "*int8" `820 
C L "stricmp" 6 19 6 "FUNCTION"
F N "stricmp" 6 392 ""
V L "s1" 6 392 "*int8" `822 
V L "s2" 6 392 "*int8" `823 
F G "stricmp" 6 393 "sint8(*int8 s1,*int8 s2)" `821 
F N "strlwr" 6 406 ""
V L "s" 6 406 "*int8" `827 
F G "strlwr" 6 407 "*int8(*int8 s)" `826 
V L "P" 6 408 "*int8" `828 
F N "strupr" 6 420 ""
V L "s" 6 420 "*int8" `830 
F G "strupr" 6 421 "*int8(*int8 s)" `829 
V L "P" 6 422 "*int8" `831 
F N "div" 4 274 ""
V L "numer" 4 274 "sint8" `732 
V L "denom" 4 274 "sint8" `834 
F G "div" 4 275 "div_t(sint8 numer,sint8 denom)" `731 
V L "val" 4 276 "div_t" `832 
F N "ldiv" 4 282 ""
V L "numer" 4 282 "sint16" `735 
V L "denom" 4 282 "sint16" `838 
F G "ldiv" 4 283 "ldiv_t(sint16 numer,sint16 denom)" `734 
V L "val" 4 284 "ldiv_t" `836 
F N "atoe" 4 361 ""
V L "s" 4 361 "*int8" `841 
F G "atoe" 4 362 "float(*int8 s)" `724 
V L "pow10" 4 363 "float" `840 
V L "result" 4 364 "float" `841 
V L "sign" 4 365 "int8" `842 
V L "expsign" 4 366 "int8" `843 
V L "c" 4 367 "int8" `844 
V L "ptr" 4 368 "int8" `845 
V L "i" 4 369 "int8" `846 
V L "exp" 4 370 "float" `847 
V L "expcnt" 4 371 "int8" `848 
C L "atoe" 4 397 1 "FUNCTION"
F N "atoi" 4 429 ""
V L "s" 4 429 "*int8" `861 
F G "atoi" 4 430 "sint8(*int8 s)" `703 
V L "result" 4 431 "sint8" `860 
V L "sign" 4 432 "int8" `861 
V L "base" 4 432 "int8" `862 
V L "index" 4 432 "int8" `863 
V L "c" 4 433 "int8" `864 
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
C L "atoi" 4 397 1 "FUNCTION"
F N "atol" 4 498 ""
V L "s" 4 498 "*int8" `866 
F G "atol" 4 499 "sint16(*int8 s)" `711 
V L "result" 4 500 "sint16" `865 
V L "sign" 4 501 "int8" `866 
V L "base" 4 501 "int8" `867 
V L "index" 4 501 "int8" `868 
V L "c" 4 502 "int8" `869 
C L "atol" 4 397 1 "FUNCTION"
C L "atol" 4 397 1 "FUNCTION"
C L "atol" 4 397 1 "FUNCTION"
C L "atol" 4 397 1 "FUNCTION"
C L "mult_with10" 4 397 1 "FUNCTION"
F N "mult_with10" 4 565 ""
V L "num" 4 565 "int32" `871 
F G "mult_with10" 4 566 "sint32(int32 num)" `870 
F N "atoi32" 4 571 ""
V L "s" 4 571 "*int8" `873 
F G "atoi32" 4 572 "sint32(*int8 s)" `705 
V L "result" 4 573 "sint32" `872 
V L "sign" 4 574 "int8" `873 
V L "base" 4 574 "int8" `874 
V L "index" 4 574 "int8" `875 
V L "c" 4 575 "int8" `876 
C L "atoi32" 4 397 1 "FUNCTION"
C L "atoi32" 4 397 1 "FUNCTION"
C L "atoi32" 4 397 1 "FUNCTION"
C L "atoi32" 4 397 1 "FUNCTION"
C L "atoi32" 4 397 1 "FUNCTION"
F N "itoa" 4 770 ""
V L "num" 4 770 "sint32" `708 
V L "base" 4 770 "int8" `709 
V L "s" 4 770 "*int8" `880 
F G "itoa" 4 771 "*int8(sint32 num,int8 base,*int8 s)" `707 
V L "temp" 4 772 "int32" `877 
V L "i" 4 773 "int8" `878 
V L "sign" 4 773 "int8" `879 
V L "cnt" 4 773 "int8" `880 
V L "c" 4 774 "int8" `881 
C L "itoa" 4 397 1 "FUNCTION"
C L "itoa" 4 397 1 "FUNCTION"
C L "itoa" 4 397 1 "FUNCTION"
C L "itoa" 4 397 1 "FUNCTION"
C L "itoa" 4 397 1 "FUNCTION"
F N "strtof" 4 885 ""
V L "s" 4 885 "*int8" `722 
V L "endptr" 4 885 "*int8" `890 
F G "strtof" 4 886 "float(*int8 s,*int8 endptr)" `721 
V L "pow10" 4 887 "float" `888 
V L "result" 4 888 "float" `889 
V L "skip" 4 889 "int1" `890 
V L "sign" 4 889 "int1" `891 
V L "point" 4 889 "int1" `892 
V L "c" 4 890 "int8" `893 
V L "ptr" 4 891 "int8" `894 
F N "strtoul" 4 1103 ""
V L "s" 4 1103 "*int8" `718 
V L "endptr" 4 1103 "*int8" `719 
V L "base" 4 1103 "sint8" `899 
F G "strtoul" 4 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `717 
V L "sc" 4 1105 "*int8" `896 
V L "s1" 4 1105 "*int8" `897 
V L "sd" 4 1105 "*int8" `898 
V L "x" 4 1106 "int16" `899 
V L "sign" 4 1107 "int8" `900 
V L "digits" 4 1108 "int8[1]" `901 
C L "strtoul" 4 397 1 "FUNCTION"
C L "strtoul" 4 397 1 "FUNCTION"
C L "strtoul" 4 397 1 "FUNCTION"
F N "strtol" 4 1165 ""
V L "s" 4 1165 "*int8" `714 
V L "endptr" 4 1165 "*int8" `715 
V L "base" 4 1165 "sint8" `906 
F G "strtol" 4 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `713 
V L "sc" 4 1167 "*int8" `903 
V L "s1" 4 1167 "*int8" `904 
V L "sd" 4 1167 "*int8" `905 
V L "x" 4 1168 "sint16" `906 
V L "sign" 4 1169 "int8" `907 
V L "digits" 4 1170 "int8[1]" `908 
C L "strtol" 4 397 1 "FUNCTION"
C L "strtol" 4 397 1 "FUNCTION"
C L "strtol" 4 397 1 "FUNCTION"
F N "system" 4 1228 ""
V L "string" 4 1228 "*int8" `911 
F G "system" 4 1229 "sint8(*int8 string)" `729 
F N "mblen" 4 1233 ""
V L "s" 4 1233 "*int8" `911 
V L "n" 4 1233 "int8" `912 
F G "mblen" 4 1234 "int8(*int8 s,int8 n)" `910 
F N "mbtowc" 4 1238 ""
V L "pwc" 4 1238 "*int8" `914 
V L "s" 4 1238 "*int8" `915 
V L "n" 4 1238 "int8" `916 
F G "mbtowc" 4 1239 "int8(*int8 pwc,*int8 s,int8 n)" `913 
F N "wctomb" 4 1244 ""
V L "s" 4 1244 "*int8" `918 
V L "wchar" 4 1244 "int8" `919 
F G "wctomb" 4 1245 "int8(*int8 s,int8 wchar)" `917 
F N "mbstowcs" 4 1250 ""
V L "pwcs" 4 1250 "*int8" `921 
V L "s" 4 1250 "*int8" `922 
V L "n" 4 1250 "int8" `923 
F G "mbstowcs" 4 1251 "int8(*int8 pwcs,*int8 s,int8 n)" `920 
F N "wcstombs" 4 1256 ""
V L "s" 4 1256 "*int8" `925 
V L "pwcs" 4 1256 "*int8" `926 
V L "n" 4 1256 "int8" `927 
F G "wcstombs" 4 1257 "int8(*int8 s,*int8 pwcs,int8 n)" `924 
V G "_Randseed" 4 1266 "int32" `928 
F N "rand" 4 1268 ""
F G "rand" 4 1269 "int16()" `726 
F N "srand" 4 1274 ""
V L "seed" 4 1274 "int32" `933 
F G "srand" 4 1275 "void(int32 seed)" `727 
F N "*_Cmpfun" 4 1284 ""
V L "p1" 4 1284 "*int8" `933 
V L "p2" 4 1284 "*int8" `934 
T G "*_Cmpfun" 4 1284 "sint8(*int8 p1,*int8 p2)" `932 
F N "qsort" 4 1291 ""
V L "qdata" 4 1291 "*int8" `937 
V L "qitems" 4 1291 "int8" `938 
V L "qsize" 4 1291 "int8" `939 
V L "cmp" 4 1291 "_Cmpfun" `940 
F G "qsort" 4 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `936 
V L "m" 4 1292 "int8" `941 
V L "j" 4 1292 "int8" `942 
V L "i" 4 1292 "int8" `943 
V L "l" 4 1292 "int8" `944 
V L "done" 4 1293 "int1" `945 
V L "t" 4 1294 "int8[16]" `946 
F N "bsearch" 4 1319 ""
V L "key" 4 1319 "*int8" `949 
V L "base" 4 1319 "*int8" `950 
V L "num" 4 1319 "int8" `951 
V L "width" 4 1319 "int8" `952 
V L "cmp" 4 1319 "_Cmpfun" `953 
F G "bsearch" 4 1320 "*int8(*int8 key,*int8 base,int8 num,int8 width,_Cmpfun cmp)" `948 
V L "P" 4 1321 "*int8" `954 
V L "q" 4 1321 "*int8" `955 
V L "n" 4 1322 "int8" `956 
V L "pivot" 4 1323 "int8" `957 
V L "val" 4 1324 "sint8" `958 
C L "bsearch" 4 397 1 "FUNCTION"
V G "name" 0 8 "int8[1]" `959 
V G "Text" 0 9 "int8[1]" `960 
V G "value" 0 10 "float" `961 
V G "per" 0 11 "float" `962 
F N "MAIN" 0 12 ""
F G "MAIN" 0 12 "void()" `963 
V L "value1" 0 21 "int8[20]" `966 
V L "value2" 0 22 "int8[20]" `967 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
