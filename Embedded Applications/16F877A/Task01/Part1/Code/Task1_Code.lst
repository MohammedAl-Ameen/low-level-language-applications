CCS PCM C Compiler, Version 5.049, 5967               21-Oct-20 02:14

               Filename:   D:\Projects\Programing\Embedded\Task1_Code.lst

               ROM used:   507 words (6%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           20 (5%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   163
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 74,39
0005:  DATA 61,33
0006:  DATA E6,34
0007:  DATA 63,10
0008:  DATA 31,10
0009:  DATA 73,3A
000A:  DATA 6F,38
000B:  DATA 0A,10
000C:  DATA 74,39
000D:  DATA 61,33
000E:  DATA E6,34
000F:  DATA 63,10
0010:  DATA 32,10
0011:  DATA E7,37
0012:  DATA 00,00
0013:  DATA 74,39
0014:  DATA 61,33
0015:  DATA E6,34
0016:  DATA 63,10
0017:  DATA 31,10
0018:  DATA F7,30
0019:  DATA 69,3A
001A:  DATA 0A,10
001B:  DATA 74,39
001C:  DATA 61,33
001D:  DATA E6,34
001E:  DATA 63,10
001F:  DATA 32,10
0020:  DATA F7,30
0021:  DATA 69,3A
0022:  DATA 00,01
0023:  DATA 74,39
0024:  DATA 61,33
0025:  DATA E6,34
0026:  DATA 63,10
0027:  DATA 31,10
0028:  DATA E7,37
0029:  DATA 0A,10
002A:  DATA 74,39
002B:  DATA 61,33
002C:  DATA E6,34
002D:  DATA 63,10
002E:  DATA 32,10
002F:  DATA 73,3A
0030:  DATA 6F,38
0031:  DATA 00,00
*
010D:  MOVF   0B,W
010E:  MOVWF  22
010F:  BCF    0B.7
0110:  BSF    03.5
0111:  BSF    03.6
0112:  BSF    0C.7
0113:  BSF    0C.0
0114:  NOP
0115:  NOP
0116:  BCF    03.5
0117:  BCF    03.6
0118:  BTFSC  22.7
0119:  BSF    0B.7
011A:  BSF    03.6
011B:  MOVF   0C,W
011C:  ANDLW  7F
011D:  BTFSC  03.2
011E:  GOTO   161
011F:  BCF    03.6
0120:  MOVWF  22
0121:  BSF    03.6
0122:  MOVF   0D,W
0123:  BCF    03.6
0124:  MOVWF  23
0125:  BSF    03.6
0126:  MOVF   0F,W
0127:  BCF    03.6
0128:  MOVWF  24
0129:  MOVF   22,W
012A:  MOVWF  25
012B:  CALL   0E1
012C:  MOVF   23,W
012D:  BSF    03.6
012E:  MOVWF  0D
012F:  BCF    03.6
0130:  MOVF   24,W
0131:  BSF    03.6
0132:  MOVWF  0F
0133:  BCF    03.6
0134:  MOVF   0B,W
0135:  MOVWF  25
0136:  BCF    0B.7
0137:  BSF    03.5
0138:  BSF    03.6
0139:  BSF    0C.7
013A:  BSF    0C.0
013B:  NOP
013C:  NOP
013D:  BCF    03.5
013E:  BCF    03.6
013F:  BTFSC  25.7
0140:  BSF    0B.7
0141:  BSF    03.6
0142:  RLF    0C,W
0143:  RLF    0E,W
0144:  ANDLW  7F
0145:  BTFSC  03.2
0146:  GOTO   161
0147:  BCF    03.6
0148:  MOVWF  22
0149:  BSF    03.6
014A:  MOVF   0D,W
014B:  BCF    03.6
014C:  MOVWF  23
014D:  BSF    03.6
014E:  MOVF   0F,W
014F:  BCF    03.6
0150:  MOVWF  24
0151:  MOVF   22,W
0152:  MOVWF  25
0153:  CALL   0E1
0154:  MOVF   23,W
0155:  BSF    03.6
0156:  MOVWF  0D
0157:  BCF    03.6
0158:  MOVF   24,W
0159:  BSF    03.6
015A:  MOVWF  0F
015B:  INCF   0D,F
015C:  BTFSC  03.2
015D:  INCF   0F,F
015E:  BCF    03.6
015F:  GOTO   10D
0160:  BSF    03.6
0161:  BCF    03.6
0162:  RETURN
....................  
.................... #list 
....................  
.................... #fuses xt , nowdt 
.................... #use delay(clock=2 000 000) 
*
0032:  MOVLW  27
0033:  MOVWF  04
0034:  BCF    03.7
0035:  MOVF   00,W
0036:  BTFSC  03.2
0037:  GOTO   03F
0038:  MOVLW  A5
0039:  MOVWF  77
003A:  DECFSZ 77,F
003B:  GOTO   03A
003C:  NOP
003D:  DECFSZ 00,F
003E:  GOTO   038
003F:  RETURN
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0058:  MOVLW  0F
0059:  BSF    03.5
005A:  ANDWF  08,W
005B:  IORLW  F0
005C:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
005D:  BCF    03.5
005E:  BSF    08.2
....................    delay_cycles(1); 
005F:  NOP
....................    lcd_output_enable(1); 
0060:  BSF    08.0
....................    delay_cycles(1); 
0061:  NOP
....................    high = lcd_read_nibble(); 
0062:  CALL   04C
0063:  MOVF   78,W
0064:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
0065:  BCF    08.0
....................    delay_cycles(1); 
0066:  NOP
....................    lcd_output_enable(1); 
0067:  BSF    08.0
....................    delay_us(1); 
....................    low = lcd_read_nibble(); 
0068:  CALL   04C
0069:  MOVF   78,W
006A:  MOVWF  2C
....................        
....................    lcd_output_enable(0); 
006B:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
006C:  MOVLW  0F
006D:  BSF    03.5
006E:  ANDWF  08,W
006F:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0070:  BCF    03.5
0071:  SWAPF  2D,W
0072:  MOVWF  77
0073:  MOVLW  F0
0074:  ANDWF  77,F
0075:  MOVF   77,W
0076:  IORWF  2C,W
0077:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
004C:  MOVF   08,W
004D:  MOVWF  77
004E:  SWAPF  08,W
004F:  ANDLW  0F
0050:  MOVWF  78
....................   #endif 
0051:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0040:  SWAPF  2D,W
0041:  ANDLW  F0
0042:  MOVWF  77
0043:  MOVLW  0F
0044:  ANDWF  08,W
0045:  IORWF  77,W
0046:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0047:  NOP
....................    lcd_output_enable(1); 
0048:  BSF    08.0
....................    delay_us(2); 
0049:  NOP
....................    lcd_output_enable(0); 
004A:  BCF    08.0
004B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0052:  BSF    03.5
0053:  BCF    08.0
....................    lcd_rs_tris(); 
0054:  BCF    08.1
....................    lcd_rw_tris(); 
0055:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0056:  BCF    03.5
0057:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0078:  MOVF   78,W
0079:  MOVWF  2C
007A:  BTFSC  2C.7
007B:  GOTO   058
....................    lcd_output_rs(address); 
007C:  BTFSS  2A.0
007D:  BCF    08.1
007E:  BTFSC  2A.0
007F:  BSF    08.1
....................    delay_cycles(1); 
0080:  NOP
....................    lcd_output_rw(0); 
0081:  BCF    08.2
....................    delay_cycles(1); 
0082:  NOP
....................    lcd_output_enable(0); 
0083:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0084:  SWAPF  2B,W
0085:  MOVWF  2C
0086:  MOVLW  0F
0087:  ANDWF  2C,F
0088:  MOVF   2C,W
0089:  MOVWF  2D
008A:  CALL   040
....................    lcd_send_nibble(n & 0xf); 
008B:  MOVF   2B,W
008C:  ANDLW  0F
008D:  MOVWF  2C
008E:  MOVWF  2D
008F:  CALL   040
0090:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0091:  MOVLW  28
0092:  MOVWF  23
0093:  MOVLW  0C
0094:  MOVWF  24
0095:  MOVLW  01
0096:  MOVWF  25
0097:  MOVLW  06
0098:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0099:  BCF    08.0
....................    lcd_output_rs(0); 
009A:  BCF    08.1
....................    lcd_output_rw(0); 
009B:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
009C:  MOVLW  0F
009D:  BSF    03.5
009E:  ANDWF  08,W
009F:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00A0:  BCF    08.0
....................    lcd_rs_tris(); 
00A1:  BCF    08.1
....................    lcd_rw_tris(); 
00A2:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00A3:  MOVLW  0F
00A4:  BCF    03.5
00A5:  MOVWF  27
00A6:  CALL   032
....................    for(i=1;i<=3;++i) 
00A7:  MOVLW  01
00A8:  MOVWF  22
00A9:  MOVF   22,W
00AA:  SUBLW  03
00AB:  BTFSS  03.0
00AC:  GOTO   0B5
....................    { 
....................        lcd_send_nibble(3); 
00AD:  MOVLW  03
00AE:  MOVWF  2D
00AF:  CALL   040
....................        delay_ms(5); 
00B0:  MOVLW  05
00B1:  MOVWF  27
00B2:  CALL   032
00B3:  INCF   22,F
00B4:  GOTO   0A9
....................    } 
....................     
....................    lcd_send_nibble(2); 
00B5:  MOVLW  02
00B6:  MOVWF  2D
00B7:  CALL   040
....................    delay_ms(5); 
00B8:  MOVLW  05
00B9:  MOVWF  27
00BA:  CALL   032
....................    for(i=0;i<=3;++i) 
00BB:  CLRF   22
00BC:  MOVF   22,W
00BD:  SUBLW  03
00BE:  BTFSS  03.0
00BF:  GOTO   0CC
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00C0:  MOVLW  23
00C1:  ADDWF  22,W
00C2:  MOVWF  04
00C3:  BCF    03.7
00C4:  MOVF   00,W
00C5:  MOVWF  27
00C6:  CLRF   2A
00C7:  MOVF   27,W
00C8:  MOVWF  2B
00C9:  CALL   052
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00CA:  INCF   22,F
00CB:  GOTO   0BC
00CC:  BCF    0A.3
00CD:  BCF    0A.4
00CE:  GOTO   172 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00CF:  DECFSZ 27,W
00D0:  GOTO   0D2
00D1:  GOTO   0D5
....................       address=LCD_LINE_TWO; 
00D2:  MOVLW  40
00D3:  MOVWF  28
00D4:  GOTO   0D6
....................    else 
....................       address=0; 
00D5:  CLRF   28
....................       
....................    address+=x-1; 
00D6:  MOVLW  01
00D7:  SUBWF  26,W
00D8:  ADDWF  28,F
....................    lcd_send_byte(0,0x80|address); 
00D9:  MOVF   28,W
00DA:  IORLW  80
00DB:  MOVWF  29
00DC:  CLRF   2A
00DD:  MOVF   29,W
00DE:  MOVWF  2B
00DF:  CALL   052
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E0:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00E1:  MOVF   25,W
00E2:  XORLW  07
00E3:  BTFSC  03.2
00E4:  GOTO   0EF
00E5:  XORLW  0B
00E6:  BTFSC  03.2
00E7:  GOTO   0F4
00E8:  XORLW  06
00E9:  BTFSC  03.2
00EA:  GOTO   0FC
00EB:  XORLW  02
00EC:  BTFSC  03.2
00ED:  GOTO   102
00EE:  GOTO   107
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00EF:  MOVLW  01
00F0:  MOVWF  26
00F1:  MOVWF  27
00F2:  CALL   0CF
00F3:  GOTO   10C
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00F4:  CLRF   2A
00F5:  MOVLW  01
00F6:  MOVWF  2B
00F7:  CALL   052
....................                      delay_ms(2); 
00F8:  MOVLW  02
00F9:  MOVWF  27
00FA:  CALL   032
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00FB:  GOTO   10C
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00FC:  MOVLW  01
00FD:  MOVWF  26
00FE:  MOVLW  02
00FF:  MOVWF  27
0100:  CALL   0CF
0101:  GOTO   10C
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0102:  CLRF   2A
0103:  MOVLW  10
0104:  MOVWF  2B
0105:  CALL   052
0106:  GOTO   10C
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0107:  MOVLW  01
0108:  MOVWF  2A
0109:  MOVF   25,W
010A:  MOVWF  2B
010B:  CALL   052
....................      #endif 
....................    } 
010C:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main(){ 
*
0163:  MOVF   03,W
0164:  ANDLW  1F
0165:  MOVWF  03
0166:  CLRF   21
0167:  CLRF   20
0168:  BSF    03.5
0169:  BSF    1F.0
016A:  BSF    1F.1
016B:  BSF    1F.2
016C:  BCF    1F.3
016D:  MOVLW  07
016E:  MOVWF  1C
016F:  BCF    03.7
....................  
.................... lcd_init(); 
0170:  BCF    03.5
0171:  GOTO   091
....................  
.................... while(1){ 
.................... lcd_putc('\f'); 
0172:  MOVLW  0C
0173:  MOVWF  25
0174:  CALL   0E1
.................... lcd_gotoxy(1,1); 
0175:  MOVLW  01
0176:  MOVWF  26
0177:  MOVWF  27
0178:  CALL   0CF
.................... printf(lcd_putc,"traffic 1 stop\n traffic 2 go"); 
0179:  MOVLW  04
017A:  BSF    03.6
017B:  MOVWF  0D
017C:  MOVLW  00
017D:  MOVWF  0F
017E:  BCF    03.6
017F:  CALL   10D
.................... output_bit(pin_a0,1); 
0180:  BSF    05.0
0181:  BSF    03.5
0182:  BCF    05.0
.................... output_bit(pin_a1,0); 
0183:  BCF    03.5
0184:  BCF    05.1
0185:  BSF    03.5
0186:  BCF    05.1
.................... output_bit(pin_a2,0); 
0187:  BCF    03.5
0188:  BCF    05.2
0189:  BSF    03.5
018A:  BCF    05.2
.................... output_bit(pin_b0,0); 
018B:  BCF    03.5
018C:  BCF    06.0
018D:  BSF    03.5
018E:  BCF    06.0
.................... output_bit(pin_b1,0); 
018F:  BCF    03.5
0190:  BCF    06.1
0191:  BSF    03.5
0192:  BCF    06.1
.................... output_bit(pin_b2,1); 
0193:  BCF    03.5
0194:  BSF    06.2
0195:  BSF    03.5
0196:  BCF    06.2
.................... delay_ms(4000); 
0197:  MOVLW  10
0198:  BCF    03.5
0199:  MOVWF  22
019A:  MOVLW  FA
019B:  MOVWF  27
019C:  CALL   032
019D:  DECFSZ 22,F
019E:  GOTO   19A
.................... lcd_putc('\f'); 
019F:  MOVLW  0C
01A0:  MOVWF  25
01A1:  CALL   0E1
.................... lcd_gotoxy(1,1); 
01A2:  MOVLW  01
01A3:  MOVWF  26
01A4:  MOVWF  27
01A5:  CALL   0CF
.................... printf(lcd_putc,"traffic 1 wait\n traffic 2 wait"); 
01A6:  MOVLW  13
01A7:  BSF    03.6
01A8:  MOVWF  0D
01A9:  MOVLW  00
01AA:  MOVWF  0F
01AB:  BCF    03.6
01AC:  CALL   10D
.................... output_bit(pin_a0,0); 
01AD:  BCF    05.0
01AE:  BSF    03.5
01AF:  BCF    05.0
.................... output_bit(pin_a1,1); 
01B0:  BCF    03.5
01B1:  BSF    05.1
01B2:  BSF    03.5
01B3:  BCF    05.1
.................... output_bit(pin_a2,0); 
01B4:  BCF    03.5
01B5:  BCF    05.2
01B6:  BSF    03.5
01B7:  BCF    05.2
.................... output_bit(pin_b0,0); 
01B8:  BCF    03.5
01B9:  BCF    06.0
01BA:  BSF    03.5
01BB:  BCF    06.0
.................... output_bit(pin_b1,1); 
01BC:  BCF    03.5
01BD:  BSF    06.1
01BE:  BSF    03.5
01BF:  BCF    06.1
.................... output_bit(pin_b2,0); 
01C0:  BCF    03.5
01C1:  BCF    06.2
01C2:  BSF    03.5
01C3:  BCF    06.2
.................... delay_ms(2000); 
01C4:  MOVLW  08
01C5:  BCF    03.5
01C6:  MOVWF  22
01C7:  MOVLW  FA
01C8:  MOVWF  27
01C9:  CALL   032
01CA:  DECFSZ 22,F
01CB:  GOTO   1C7
.................... lcd_putc('\f'); 
01CC:  MOVLW  0C
01CD:  MOVWF  25
01CE:  CALL   0E1
.................... lcd_gotoxy(1,1); 
01CF:  MOVLW  01
01D0:  MOVWF  26
01D1:  MOVWF  27
01D2:  CALL   0CF
.................... printf(lcd_putc,"traffic 1 go\n traffic 2 stop"); 
01D3:  MOVLW  23
01D4:  BSF    03.6
01D5:  MOVWF  0D
01D6:  MOVLW  00
01D7:  MOVWF  0F
01D8:  BCF    03.6
01D9:  CALL   10D
.................... output_bit(pin_a0,0); 
01DA:  BCF    05.0
01DB:  BSF    03.5
01DC:  BCF    05.0
.................... output_bit(pin_a1,0); 
01DD:  BCF    03.5
01DE:  BCF    05.1
01DF:  BSF    03.5
01E0:  BCF    05.1
.................... output_bit(pin_a2,1); 
01E1:  BCF    03.5
01E2:  BSF    05.2
01E3:  BSF    03.5
01E4:  BCF    05.2
.................... output_bit(pin_b0,1); 
01E5:  BCF    03.5
01E6:  BSF    06.0
01E7:  BSF    03.5
01E8:  BCF    06.0
.................... output_bit(pin_b1,0); 
01E9:  BCF    03.5
01EA:  BCF    06.1
01EB:  BSF    03.5
01EC:  BCF    06.1
.................... output_bit(pin_b2,0); 
01ED:  BCF    03.5
01EE:  BCF    06.2
01EF:  BSF    03.5
01F0:  BCF    06.2
.................... delay_ms(4000); 
01F1:  MOVLW  10
01F2:  BCF    03.5
01F3:  MOVWF  22
01F4:  MOVLW  FA
01F5:  MOVWF  27
01F6:  CALL   032
01F7:  DECFSZ 22,F
01F8:  GOTO   1F4
01F9:  GOTO   172
....................  
....................  
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... } 
....................  
01FA:  SLEEP
....................  
....................  

Configuration Fuses:
   Word  1: 2F41   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
